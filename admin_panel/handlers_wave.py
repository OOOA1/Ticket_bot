import sqlite3

from datetime import datetime

from .utils import admin_error_catcher, load_admins
from database import (
    create_new_wave,
    get_all_user_ids,
    archive_missing_tickets,
    clear_failed_deliveries,
    get_stats_statuses,
    get_wave_count,
    get_latest_wave,
    get_all_failed_deliveries,
    set_wave_state,
    get_wave_state,
    get_admins,
    archive_all_old_free_tickets,
)

def register_wave_handlers(bot):
    @bot.message_handler(commands=['new_wave'])
    @admin_error_catcher(bot)
    def handle_new_wave(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        state = get_wave_state()

        # üö´ –ó–∞–ø—Ä–µ—Ç, –µ—Å–ª–∏ –≤–æ–ª–Ω–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞
        if state["status"] == "active":
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í–æ–ª–Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /end_wave.")
            return

        # üö´ –ó–∞–ø—Ä–µ—Ç, –µ—Å–ª–∏ –≤–æ–ª–Ω–∞ —É–∂–µ –±—ã–ª–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if state["status"] == "awaiting_confirm":
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–æ–ª–Ω—ã —É–∂–µ –≤–µ–¥—ë—Ç—Å—è. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –≤–æ–ª–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /end_wave –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π.")
            return

        # üö´ –ó–∞–ø—Ä–µ—Ç, –µ—Å–ª–∏ –≤ idle —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–∏–ª–µ—Ç—ã –±–µ–∑ –≤–æ–ª–Ω—ã
        if state["status"] == "idle":
            conn = sqlite3.connect("users.db")
            cur = conn.cursor()
            cur.execute("""
                SELECT COUNT(*) FROM tickets
                WHERE assigned_to IS NULL
                AND archived_unused = 0
                AND lost = 0
                AND wave_id IS NULL
            """)
            pending = cur.fetchone()[0]
            conn.close()

            if pending > 0:
                bot.send_message(
                    message.chat.id,
                    f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {pending} –±–∏–ª–µ—Ç–æ–≤, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ –∑–∞–ø—É—Å–∫–∞ –≤–æ–ª–Ω—ã.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –∏—Ö –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –≤–æ–ª–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /end_wave –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π."
                )
                return

        # ‚úÖ –í—Å—ë —á–∏—Å—Ç–æ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –≤–æ–ª–Ω—É

        lost_count = archive_missing_tickets()
        archive_all_old_free_tickets()
        clear_failed_deliveries()

        now = datetime.now().isoformat()
        set_wave_state("awaiting_confirm", prepared_at=now)

        msg = (
            f"üõ† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ–≤–æ–π –≤–æ–ª–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            f"‚è≥ –í—Ä–µ–º—è: {now}\n"
        )
        if lost_count > 0:
            msg += f"‚ö†Ô∏è –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö: {lost_count} –±–∏–ª–µ—Ç–æ–≤.\n"
        msg += "üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –±–∏–ª–µ—Ç—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–æ–ª–Ω—É —á–µ—Ä–µ–∑ /confirm_wave."

        bot.send_message(message.chat.id, msg)


    @bot.message_handler(commands=['confirm_wave'])
    @admin_error_catcher(bot)
    def handle_confirm_wave(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        state = get_wave_state()
        if state["status"] != "awaiting_confirm":
            bot.send_message(message.chat.id, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–ª–Ω—É. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /new_wave.")
            return

        prepared_at = datetime.fromisoformat(state["prepared_at"])
        all_users = get_all_user_ids()
        admins = set(get_admins())
        user_count = len([uid for uid in all_users if uid not in admins])

        # üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã
        lost_count = archive_missing_tickets()

        conn = sqlite3.connect("users.db")
        cur = conn.cursor()
        cur.execute("""
            SELECT COUNT(*) FROM tickets
            WHERE assigned_to IS NULL
            AND archived_unused = 0
            AND lost = 0
            AND uploaded_at > ?
        """, (prepared_at.isoformat(),))
        available_tickets = cur.fetchone()[0]
        conn.close()

        if available_tickets < user_count or available_tickets == 0:
            msg = (
                f"‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤.\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
                f"üéü –ù–æ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤: {available_tickets}\n"
            )
            if lost_count > 0:
                msg += f"‚ö†Ô∏è –¢–∞–∫–∂–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {lost_count} —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤.\n"
            msg += "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upload_zip"
            bot.send_message(message.chat.id, msg)
            return

        wave_start, wave_id = create_new_wave(message.from_user.id)

        conn = sqlite3.connect("users.db")
        cur = conn.cursor()
        cur.execute("""
            UPDATE tickets
            SET assigned_at = NULL, wave_id = ?
            WHERE assigned_to IS NULL
            AND archived_unused = 0
            AND lost = 0
            AND uploaded_at > ?
        """, (wave_id, prepared_at.isoformat()))
        conn.commit()
        conn.close()

        set_wave_state("active", wave_start=wave_start)

        msg = (
            f"‚úÖ –í–æ–ª–Ω–∞ ‚Ññ{wave_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
            f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {wave_start}\n"
        )
        if lost_count > 0:
            msg += f"‚ö†Ô∏è –¢–∞–∫–∂–µ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {lost_count} —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤.\n"
        msg += "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /send_tickets."

        bot.send_message(message.chat.id, msg)

    
    @bot.message_handler(commands=['end_wave'])
    @admin_error_catcher(bot)
    def handle_end_wave(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        state = get_wave_state()
        if state["status"] != "active":
            bot.send_message(message.chat.id, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–æ–ª–Ω—ã.")
            return

        # üßπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã
        lost_count = archive_missing_tickets()

        # üßº –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–æ–ª–Ω—É
        set_wave_state("idle", prepared_at=None, wave_start=None)

        msg = "‚úÖ –¢–µ–∫—É—â–∞—è –≤–æ–ª–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é /new_wave."
        if lost_count > 0:
            msg += f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö: {lost_count} –±–∏–ª–µ—Ç–æ–≤."

        bot.send_message(message.chat.id, msg)