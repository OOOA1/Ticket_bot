import sqlite3

from datetime import datetime

from .utils import admin_error_catcher, load_admins
from database import (
    create_new_wave,
    get_all_user_ids,
    archive_missing_tickets,
    clear_failed_deliveries,
    get_stats_statuses,
    get_wave_count,
    get_latest_wave,
    get_all_failed_deliveries,
    set_wave_state,
    get_wave_state,
    get_admins,
    get_current_wave_id,
    archive_all_old_free_tickets,
)

def register_wave_handlers(bot):
    @bot.message_handler(commands=['new_wave'])
    @admin_error_catcher(bot)
    def handle_new_wave(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        state = get_wave_state()

        # üö´ –ó–∞–ø—Ä–µ—Ç, –µ—Å–ª–∏ –≤–æ–ª–Ω–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞
        if state["status"] == "active":
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í–æ–ª–Ω–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /end_wave.")
            return
        
        # üö´ –ó–∞–ø—Ä–µ—Ç, –µ—Å–ª–∏ –≤–æ–ª–Ω–∞ —É–∂–µ –±—ã–ª–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if state["status"] == "awaiting_confirm":
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–æ–ª–Ω—ã —É–∂–µ –≤–µ–¥—ë—Ç—Å—è. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –≤–æ–ª–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /end_wave –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π.")
            return

        # üö´ –ó–∞–ø—Ä–µ—Ç, –µ—Å–ª–∏ –≤ idle —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–∏–ª–µ—Ç—ã –±–µ–∑ –≤–æ–ª–Ω—ã
        if state["status"] == "idle":
            conn = sqlite3.connect("users.db")
            cur = conn.cursor()
            cur.execute("""
                SELECT COUNT(*) FROM tickets
                WHERE assigned_to IS NULL
                AND archived_unused = 0
                AND lost = 0
                AND wave_id IS NULL
            """)
            pending = cur.fetchone()[0]
            conn.close()

            if pending > 0:
                bot.send_message(
                    message.chat.id,
                    f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {pending} –±–∏–ª–µ—Ç–æ–≤, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ –∑–∞–ø—É—Å–∫–∞ –≤–æ–ª–Ω—ã.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –∏—Ö –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –≤–æ–ª–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /end_wave –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π."
                )
                return

        # ‚úÖ –í—Å—ë —á–∏—Å—Ç–æ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –≤–æ–ª–Ω—É

        lost_count = archive_missing_tickets()
        archive_all_old_free_tickets()
        clear_failed_deliveries()

        now = datetime.now().isoformat()
        set_wave_state("awaiting_confirm", prepared_at=now)

        msg = (
            f"üõ† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ–≤–æ–π –≤–æ–ª–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            f"‚è≥ –í—Ä–µ–º—è: {now}\n"
        )
        if lost_count > 0:
            msg += f"‚ö†Ô∏è –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö: {lost_count} –±–∏–ª–µ—Ç–æ–≤.\n"
        msg += "üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ –±–∏–ª–µ—Ç—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–æ–ª–Ω—É —á–µ—Ä–µ–∑ /confirm_wave."

        bot.send_message(message.chat.id, msg)


    
    @bot.message_handler(commands=['confirm_wave'])
    @admin_error_catcher(bot)
    def handle_confirm_wave(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        state = get_wave_state()
        if state["status"] != "awaiting_confirm":
            bot.send_message(message.chat.id, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–ª–Ω—É. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /new_wave.")
            return

        prepared_at = datetime.fromisoformat(state["prepared_at"])
        all_users = get_all_user_ids()
        admins = set(get_admins())
        user_count = len([uid for uid in all_users if uid not in admins])

        lost_count = archive_missing_tickets()

        conn = sqlite3.connect("users.db")
        cur = conn.cursor()
        cur.execute("""
            SELECT COUNT(*) FROM tickets
            WHERE assigned_to IS NULL
            AND archived_unused = 0
            AND lost = 0
            AND uploaded_at > ?
        """, (prepared_at.isoformat(),))
        available_tickets = cur.fetchone()[0]

        if available_tickets < user_count or available_tickets == 0:
            msg = (
                f"‚ùå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤.\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
                f"üéü –ù–æ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤: {available_tickets}\n"
            )
            if lost_count > 0:
                msg += f"‚ö†Ô∏è –¢–∞–∫–∂–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {lost_count} —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤.\n"
            msg += "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upload_zip"
            bot.send_message(message.chat.id, msg)
            conn.close()
            return

        wave_start, wave_id = create_new_wave(message.from_user.id)

        # –û–±–Ω–æ–≤–∏–º wave_id –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –≤–∫–ª—é—á–∞—è lost
        cur.execute("""
            UPDATE tickets
            SET assigned_at = NULL, wave_id = ?
            WHERE wave_id IS NULL AND uploaded_at > ?
        """, (wave_id, prepared_at.isoformat()))
        conn.commit()
        conn.close()

        set_wave_state("active", wave_start=wave_start)

        msg = (
            f"‚úÖ –í–æ–ª–Ω–∞ ‚Ññ{wave_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
            f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {wave_start}\n"
        )
        if lost_count > 0:
            msg += f"‚ö†Ô∏è –¢–∞–∫–∂–µ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {lost_count} —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤.\n"
        msg += "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /send_tickets."

        bot.send_message(message.chat.id, msg)


    
    @bot.message_handler(commands=['end_wave'])
    @admin_error_catcher(bot)
    def handle_end_wave(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        state = get_wave_state()
        if state["status"] == "idle":
            bot.send_message(message.chat.id, "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–π –≤–æ–ª–Ω—ã.")
            return

        # üßπ –ß–∏—Å—Ç–∏–º –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        lost_count = archive_missing_tickets()

        # üßº –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        set_wave_state("idle", prepared_at=None, wave_start=None)

        msg = "‚úÖ –í–æ–ª–Ω–∞ —Å–±—Ä–æ—à–µ–Ω–∞.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é /new_wave."
        if lost_count > 0:
            msg += f"\n‚ö†Ô∏è –¢–∞–∫–∂–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {lost_count} —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤."

        bot.send_message(message.chat.id, msg)

        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        state = get_wave_state()
        wave_status = state["status"]
        wave_id = get_current_wave_id()

        if not wave_id:
            bot.send_message(message.chat.id, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –≤–æ–ª–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
            return

        import sqlite3
        conn = sqlite3.connect("users.db")
        cur = conn.cursor()

        # –í—Å–µ –±–∏–ª–µ—Ç—ã –≤ —ç—Ç–æ–π –≤–æ–ª–Ω–µ
        cur.execute("SELECT COUNT(*) FROM tickets WHERE wave_id=?", (wave_id,))
        total_tickets = cur.fetchone()[0]

        # –°–≤–æ–±–æ–¥–Ω—ã–µ (–Ω–µ–≤—ã–¥–∞–Ω–Ω—ã–µ)
        cur.execute("SELECT COUNT(*) FROM tickets WHERE wave_id=? AND assigned_to IS NULL AND archived_unused=0 AND lost=0", (wave_id,))
        free_tickets = cur.fetchone()[0]

        # –í—ã–¥–∞–Ω–Ω—ã–µ
        cur.execute("SELECT COUNT(*) FROM tickets WHERE wave_id=? AND assigned_to IS NOT NULL AND lost=0", (wave_id,))
        issued_tickets = cur.fetchone()[0]

        # –£—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ
        cur.execute("SELECT COUNT(*) FROM tickets WHERE wave_id=? AND lost=1", (wave_id,))
        lost_tickets = cur.fetchone()[0]

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–Ω–µ –∞–¥–º–∏–Ω—ã)
        all_users = get_all_user_ids()
        admins = set(get_admins())
        user_count = len([uid for uid in all_users if uid not in admins])

        conn.close()

        msg = (
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –≤–æ–ª–Ω—ã (ID {wave_id}):</b>\n\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å –≤–æ–ª–Ω—ã: <code>{wave_status}</code>\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{user_count}</b>\n"
            f"üéü –í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤ –≤ –≤–æ–ª–Ω–µ: <b>{total_tickets}</b>\n"
            f"üì¨ –í—ã–¥–∞–Ω–æ: <b>{issued_tickets}</b>\n"
            f"üì¶ –°–≤–æ–±–æ–¥–Ω—ã—Ö: <b>{free_tickets}</b>\n"
            f"‚ùå –£—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö: <b>{lost_tickets}</b>\n"
        )
        bot.send_message(message.chat.id, msg, parse_mode="HTML")

   
    @bot.message_handler(commands=['stats'])
    @admin_error_catcher(bot)
    def handle_stats(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return

        # 1. –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —É—Ç—Ä–∞—Ç—É
        lost_count = archive_missing_tickets()

        # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ª–Ω—ã –∏ ID
        state = get_wave_state()
        wave_status = state["status"]
        wave_id = get_current_wave_id()

        # 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –∞–¥–º–∏–Ω–æ–≤)
        all_users = get_all_user_ids()
        admins = set(get_admins())
        user_count = len([uid for uid in all_users if uid not in admins])

        # 4. –ü–æ–¥—Å—á—ë—Ç –±–∏–ª–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏ –≤–æ–ª–Ω—ã
        conn = sqlite3.connect("users.db")
        cur = conn.cursor()

        if wave_status == "active":
            cur.execute("SELECT COUNT(*) FROM tickets WHERE wave_id=?", (wave_id,))
            total_tickets = cur.fetchone()[0]

            cur.execute("""
                SELECT COUNT(*) FROM tickets
                WHERE wave_id=? AND assigned_to IS NULL AND archived_unused=0 AND lost=0
            """, (wave_id,))
            free_tickets = cur.fetchone()[0]

            cur.execute("""
                SELECT COUNT(*) FROM tickets
                WHERE wave_id=? AND assigned_to IS NOT NULL AND lost=0
            """, (wave_id,))
            issued_tickets = cur.fetchone()[0]

            cur.execute("SELECT COUNT(*) FROM tickets WHERE wave_id=? AND lost=1", (wave_id,))
            lost_tickets = cur.fetchone()[0]
        else:
            cur.execute("""
                SELECT COUNT(*) FROM tickets
                WHERE wave_id IS NULL AND assigned_to IS NULL AND archived_unused=0 AND lost=0
            """)
            total_tickets = cur.fetchone()[0]
            free_tickets = total_tickets
            issued_tickets = 0

            cur.execute("""
                SELECT COUNT(*) FROM tickets
                WHERE wave_id IS NULL AND lost=1
            """)
            lost_tickets = cur.fetchone()[0]

        conn.close()

        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        msg = (
            f"<b>üìä –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–ª–Ω—ã:</b>\n\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å –≤–æ–ª–Ω—ã: <code>{wave_status}</code>\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –∞–¥–º–∏–Ω–æ–≤): <b>{user_count}</b>\n"
            f"üéü –í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤: <b>{total_tickets}</b>\n"
            f"üì¨ –í—ã–¥–∞–Ω–æ: <b>{issued_tickets}</b>\n"
            f"üì¶ –°–≤–æ–±–æ–¥–Ω—ã—Ö: <b>{free_tickets}</b>\n"
            f"‚ùå –£—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö: <b>{lost_tickets}</b>\n"
        )
        if lost_count > 0:
            msg += f"\n‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö: <b>{lost_count}</b> –±–∏–ª–µ—Ç–æ–≤."

        bot.send_message(message.chat.id, msg, parse_mode="HTML")
