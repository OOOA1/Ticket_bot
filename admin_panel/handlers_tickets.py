import os
import tempfile
from zipfile import ZipFile
import shutil
import hashlib
from uuid import uuid4
from datetime import datetime
from database import mark_ticket_archived_unused, mark_ticket_lost, archive_missing_tickets, archive_all_old_free_tickets
from .utils import admin_error_catcher, load_admins
from config import DEFAULT_TICKET_FOLDER
from .utils import admin_error_catcher, load_admins, upload_waiting, logger
from database import (
    get_free_ticket_count,
    is_duplicate_hash,
    insert_ticket,
)

def register_tickets_handlers(bot):
    @bot.message_handler(commands=['delete_all'])
    @admin_error_catcher(bot)
    def delete_all_tickets(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            return
        count = 0
        for f in os.listdir(DEFAULT_TICKET_FOLDER):
            path = os.path.join(DEFAULT_TICKET_FOLDER, f)
            if os.path.isfile(path):
                os.remove(path)
                # –û—Ç–º–µ—Ç–∏—Ç—å –±–∏–ª–µ—Ç –∫–∞–∫ —É—Ç—Ä–∞—á–µ–Ω–Ω—ã–π
                mark_ticket_lost(path)
                count += 1
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —á–∏—Å—Ç–∏–º –∏ –≤—Å–µ –±–∏—Ç—ã–µ –±–∏–ª–µ—Ç—ã, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
        archive_missing_tickets()
        bot.send_message(message.chat.id, f"–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {count}")

    @bot.message_handler(commands=['list_tickets'])
    @admin_error_catcher(bot)
    def list_tickets(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            return

        files = os.listdir(DEFAULT_TICKET_FOLDER)
        if not files:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤.")
            return

        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .txt —Ñ–∞–π–ª —Å –∏–º–µ–Ω–∞–º–∏
        with tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.txt', encoding='utf-8') as temp_file:
            file_list = "\n".join(files)
            temp_file.write(file_list)
            temp_file_path = temp_file.name

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        with open(temp_file_path, 'rb') as doc:
            bot.send_document(message.chat.id, doc, caption="–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_file_path)

    @bot.message_handler(commands=['upload_zip'])
    @admin_error_catcher(bot)
    def start_upload(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            return
        upload_waiting[message.from_user.id] = True
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ ZIP-—Ñ–∞–π–ª —Å –±–∏–ª–µ—Ç–∞–º–∏.")

    @bot.message_handler(content_types=['document'])
    @admin_error_catcher(bot)
    def handle_document(message):
        ADMINS = load_admins()
        user_id = message.from_user.id
        mode = upload_waiting.get(user_id)
        if user_id in ADMINS and mode:
            doc = message.document
            if not doc.file_name.endswith('.zip'):
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ .zip –∞—Ä—Ö–∏–≤.")
                return

            try:
                file_info = bot.get_file(doc.file_id)
                downloaded = bot.download_file(file_info.file_path)

                zip_path = f"temp_upload_{user_id}.zip"
                with open(zip_path, 'wb') as f:
                    f.write(downloaded)

                if mode == True:
                    # –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê ‚Äî –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ, –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ
                    report_path = process_zip(zip_path, uploaded_by=user_id, bot=bot)
                elif mode == 'add':
                    # –î–û–ó–ê–ì–†–£–ó–ö–ê: —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã, –Ω–∏—á–µ–≥–æ –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                    report_path = process_zip_add(zip_path, uploaded_by=user_id, bot=bot)
                else:
                    report_path = None

                if report_path:
                    with open(report_path, 'rb') as rep:
                        bot.send_document(message.chat.id, rep, caption="üìÑ –û—Ç—á—ë—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ –±–∏–ª–µ—Ç–æ–≤")
                    os.remove(report_path)
                os.remove(zip_path)
            except Exception as e:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∞.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}", exc_info=True)

            upload_waiting[user_id] = False

    
    @bot.message_handler(commands=['upload_zip_add'])
    @admin_error_catcher(bot)
    def start_upload_add(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            return
        upload_waiting[message.from_user.id] = 'add'
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ ZIP-—Ñ–∞–π–ª –¥–ª—è –î–û–ó–ê–ì–†–£–ó–ö–ò –±–∏–ª–µ—Ç–æ–≤ (—Å—Ç–∞—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è).")



# ==== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ tickets ====

def archive_old_tickets():
    # 1) –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ PDF –≤ –ø–∞–ø–∫–µ
    pdf_files = [
        f for f in os.listdir(DEFAULT_TICKET_FOLDER)
        if f.lower().endswith('.pdf')
    ]
    if not pdf_files:
        return None  # –Ω–µ—á–µ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å

    # 2) –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏
    now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S_%f")
    archive_dir = "archive"
    temp_folder = os.path.join(archive_dir, f"_temp_{now}")
    zip_name = f"{now}.zip"
    zip_path = os.path.join(archive_dir, zip_name)

    os.makedirs(temp_folder, exist_ok=True)
    os.makedirs(archive_dir, exist_ok=True)

    # 3) –ü–µ—Ä–µ–º–µ—â–∞–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    for file_name in pdf_files:
        src = os.path.join(DEFAULT_TICKET_FOLDER, file_name)
        dst = os.path.join(temp_folder, file_name)
        # --- –≤–æ—Ç –∑–¥–µ—Å—å!
        mark_ticket_archived_unused(src)
        os.rename(src, dst)

    # 4) –ó–∞–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ –Ω–æ–≤—ã–π ZIP
    with ZipFile(zip_path, 'w') as zipf:
        for file_name in os.listdir(temp_folder):
            zipf.write(os.path.join(temp_folder, file_name), arcname=file_name)

    # 5) –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    shutil.rmtree(temp_folder)

    # 6) RETENTION ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞—Ä—Ö–∏–≤–∞
    max_archives = 3
    archives = sorted(
        f for f in os.listdir(archive_dir)
        if f.lower().endswith('.zip')
    )
    if len(archives) > max_archives:
        for old in archives[:-max_archives]:
            try:
                os.remove(os.path.join(archive_dir, old))
            except OSError:
                pass

    return zip_path

def process_zip(zip_path, uploaded_by, bot):
    added, duplicates, not_pdf = [], [], []
    seen_hashes = set()  # –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
    temp_store = []

    # 1) –°–∫–∞–Ω–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤, —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    with ZipFile(zip_path, 'r') as zip_ref:
        for file_info in zip_ref.infolist():
            original_name = file_info.filename
            if not original_name.lower().endswith(".pdf"):
                not_pdf.append(original_name)
                continue

            content = zip_ref.read(file_info)
            file_hash = hashlib.sha256(content).hexdigest()

            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å
            if is_duplicate_hash(file_hash):
                duplicates.append(original_name)
                continue

            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ —Ç–∞–∫–æ–π –∂–µ —Ñ–∞–π–ª –≤ —ç—Ç–æ–º –∂–µ –∞—Ä—Ö–∏–≤–µ
            if file_hash in seen_hashes:
                duplicates.append(original_name)
                continue

            seen_hashes.add(file_hash)
            uuid_name = f"{uuid4()}.pdf"
            full_path = os.path.join(DEFAULT_TICKET_FOLDER, uuid_name)
            temp_store.append((content, file_hash, original_name, full_path, uuid_name))

    # 2) –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö PDF ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
    if not temp_store:
        bot.send_message(
            uploaded_by,
            "‚õîÔ∏è –í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç –Ω–æ–≤—ã—Ö PDF-—Ñ–∞–π–ª–æ–≤ (–≤—Å–µ –ª–∏–±–æ –¥—É–±–ª–∏–∫–∞—Ç—ã, –ª–∏–±–æ –Ω–µ PDF).",
            parse_mode="HTML"
        )
        return None

    # 3) –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –±–∏–ª–µ—Ç—ã (—Ç–æ–ª—å–∫–æ —Ä–∞–∑, –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö)
    archive_result = archive_old_tickets()
    if archive_result:
        bot.send_message(
            uploaded_by,
            f"üì¶ –°—Ç–∞—Ä—ã–µ –±–∏–ª–µ—Ç—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤:\n<code>{archive_result}</code>",
            parse_mode="HTML"
        )
        logger.info(f"–ê—Ä—Ö–∏–≤ —Å—Ç–∞—Ä—ã—Ö –±–∏–ª–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω: {archive_result}")

    # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –≤–Ω–æ—Å–∏–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    for content, file_hash, original_name, full_path, uuid_name in temp_store:
        try:
            with open(full_path, "wb") as f:
                f.write(content)
            insert_ticket(full_path, file_hash, original_name, uploaded_by)
            added.append((original_name, uuid_name))
        except sqlite3.IntegrityError:
            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ –≤–¥—Ä—É–≥ hash —É—Å–ø–µ–ª –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            duplicates.append(original_name)

    # 5) –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—á—ë—Ç
    report_lines = [
        "=== –û—Ç—á—ë—Ç –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –±–∏–ª–µ—Ç–æ–≤ ===",
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(added)}",
        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}",
        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ PDF: {len(not_pdf)}",
        ""
    ]
    if added:
        report_lines.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã:")
        report_lines += [f"- {orig} ‚Üí {new}" for orig, new in added]
    if duplicates:
        report_lines.append("\n‚ôªÔ∏è –î—É–±–ª–∏–∫–∞—Ç—ã:")
        report_lines += [f"- {name}" for name in duplicates]
    if not_pdf:
        report_lines.append("\n‚ùå –ù–µ PDF:")
        report_lines += [f"- {name}" for name in not_pdf]

    report_text = "\n".join(report_lines)
    with tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.txt', encoding='utf-8') as temp_file:
        temp_file.write(report_text)
        return temp_file.name
    

def process_zip_add(zip_path, uploaded_by, bot):
    added, duplicates, not_pdf = [], [], []
    seen_hashes = set()

    from database import is_duplicate_hash, insert_ticket

    with ZipFile(zip_path, 'r') as zip_ref:
        for file_info in zip_ref.infolist():
            original_name = file_info.filename
            if not original_name.lower().endswith(".pdf"):
                not_pdf.append(original_name)
                continue
            content = zip_ref.read(file_info)
            file_hash = hashlib.sha256(content).hexdigest()
            if is_duplicate_hash(file_hash):
                duplicates.append(original_name)
                continue
            if file_hash in seen_hashes:
                duplicates.append(original_name)
                continue
            seen_hashes.add(file_hash)
            uuid_name = f"{uuid4()}.pdf"
            full_path = os.path.join(DEFAULT_TICKET_FOLDER, uuid_name)
            with open(full_path, "wb") as f:
                f.write(content)
            insert_ticket(full_path, file_hash, original_name, uploaded_by)
            added.append((original_name, uuid_name))

    report_lines = [
        "=== –û—Ç—á—ë—Ç –ø–æ –î–û–ó–ê–ì–†–£–ó–ö–ï –±–∏–ª–µ—Ç–æ–≤ ===",
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(added)}",
        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}",
        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ PDF: {len(not_pdf)}",
        ""
    ]
    if added:
        report_lines.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã:")
        report_lines += [f"- {orig} ‚Üí {new}" for orig, new in added]
    if duplicates:
        report_lines.append("\n‚ôªÔ∏è –î—É–±–ª–∏–∫–∞—Ç—ã:")
        report_lines += [f"- {name}" for name in duplicates]
    if not_pdf:
        report_lines.append("\n‚ùå –ù–µ PDF:")
        report_lines += [f"- {name}" for name in not_pdf]

    report_text = "\n".join(report_lines)
    with tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.txt', encoding='utf-8') as temp_file:
        temp_file.write(report_text)
        return temp_file.name
