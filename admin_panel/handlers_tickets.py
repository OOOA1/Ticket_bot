import os
import sqlite3
import tempfile
import xlsxwriter
from zipfile import ZipFile
import shutil
import hashlib
from uuid import uuid4
from datetime import datetime
from database import mark_ticket_archived_unused, mark_ticket_lost, archive_missing_tickets, archive_all_old_free_tickets, get_current_wave_id
from .utils import (
    admin_error_catcher, load_admins, upload_waiting, logger, admin_required,
    upload_files_received, upload_files_time
)
import time  # –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
from config import DEFAULT_TICKET_FOLDER
from database import (
    get_free_ticket_count,
    is_duplicate_hash,
    insert_ticket,
    get_wave_state,
    resolve_user_id,
    get_user_last_ticket_time,
    get_latest_wave,
    get_current_wave_id,
    get_free_ticket,
    assign_ticket,
    is_registered,
    get_wave_state,
    DB_PATH,
    archive_missing_tickets
)

def register_tickets_handlers(bot):
    @bot.message_handler(commands=['delete_all'])
    @admin_required(bot)
    @admin_error_catcher(bot)
    def delete_all_tickets(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            return
        count = 0
        for f in os.listdir(DEFAULT_TICKET_FOLDER):
            path = os.path.join(DEFAULT_TICKET_FOLDER, f)
            if os.path.isfile(path):
                os.remove(path)
                # –û—Ç–º–µ—Ç–∏—Ç—å –±–∏–ª–µ—Ç –∫–∞–∫ —É—Ç—Ä–∞—á–µ–Ω–Ω—ã–π
                mark_ticket_lost(path)
                count += 1
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —á–∏—Å—Ç–∏–º –∏ –≤—Å–µ –±–∏—Ç—ã–µ –±–∏–ª–µ—Ç—ã, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
        archive_missing_tickets()
        bot.send_message(message.chat.id, f"–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {count}")

    @bot.message_handler(commands=['list_tickets'])
    @admin_required(bot)
    @admin_error_catcher(bot)
    def list_tickets(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            return
        # –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º: –ø–æ–º–µ—á–∞–µ–º –≤ –±–∞–∑–µ –∫–∞–∫ LOST –≤—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        archive_missing_tickets()
        # 1) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tickets
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute("""
            SELECT file_path, original_name, assigned_to, assigned_at, archived_unused, lost, wave_id
            FROM tickets
        """)
        rows = cur.fetchall()
        conn.close()  
        if not rows:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤.")
            return
        # 2) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp:
            wb = xlsxwriter.Workbook(tmp.name)
            ws = wb.add_worksheet("Tickets Status")
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ["File Path", "Original Name", "Status", "Assigned To", "Assigned At", "Wave ID"]
            for col, hdr in enumerate(headers):
                ws.write(0, col, hdr) 
            # –î–∞–Ω–Ω—ã–µ
            for i, (path, orig, assigned_to, assigned_at, archived_unused, lost, wave_id) in enumerate(rows, start=1):
                if lost:
                    status = "LOST"
                elif assigned_to is not None:
                    status = "SENT"
                elif archived_unused:
                    status = "ARCHIVED"
                else:
                    status = "AVAILABLE"  
                ws.write(i, 0, path)
                ws.write(i, 1, orig)
                ws.write(i, 2, status)
                ws.write(i, 3, assigned_to or "")
                ws.write(i, 4, assigned_at or "")
                ws.write(i, 5, wave_id or "") 
            wb.close()
            report_path = tmp.name
        # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        with open(report_path, 'rb') as doc:
            bot.send_document(message.chat.id, doc, caption="üìä –°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏")
        os.remove(report_path)

    @bot.message_handler(commands=['upload_zip'])
    @admin_required(bot)
    @admin_error_catcher(bot)
    def start_upload(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            return
        
        state = get_wave_state()

        # ‚õîÔ∏è –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –≤–æ–ª–Ω—ã
        if state["status"] == "awaiting_confirm":
            conn = sqlite3.connect("users.db")
            cur = conn.cursor()
            cur.execute("""
                SELECT COUNT(*) FROM tickets
                WHERE assigned_to IS NULL
                AND archived_unused = 0
                AND lost = 0
                AND wave_id IS NULL
            """)
            existing = cur.fetchone()[0]
            conn.close()

            if existing > 0:
                bot.send_message(
                    message.chat.id,
                    f"‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ {existing} –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –≤–æ–ª–Ω—ã.\n"
                    f"–ß—Ç–æ–±—ã –¥–æ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–ª–µ—Ç—ã –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /upload_zip_add.\n"
                    f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /end_wave –∏ /new_wave."
                )
                return
            
        if state["status"] != "awaiting_confirm":
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –∑–∞–≥—Ä—É–∂–∞—Ç—å –±–∏–ª–µ—Ç—ã ‚Äî —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /new_wave."
            )
            return
        
        # ‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏
        upload_waiting[message.from_user.id] = True
        upload_files_received[message.from_user.id] = 0
        upload_files_time[message.from_user.id] = None
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ ZIP-—Ñ–∞–π–ª —Å –±–∏–ª–µ—Ç–∞–º–∏.")

    @bot.message_handler(content_types=['document'])
    @admin_required(bot)
    @admin_error_catcher(bot)
    def handle_document(message):
        ADMINS = load_admins()
        user_id = message.from_user.id

        # --- –ù–æ–≤–æ–µ: –µ—Å–ª–∏ –≤–Ω–µ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî –º–æ–ª—á–∏–º, –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—à–µ–º! ---
        if user_id not in upload_files_received or not upload_waiting.get(user_id):
            return

        mode = upload_waiting.get(user_id)
        state = get_wave_state()
        # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∂–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É
        if user_id not in ADMINS or not mode:
            upload_files_received.pop(user_id, None)
            upload_files_time.pop(user_id, None)
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
        if mode == 'add':
            if state["status"] not in ("awaiting_confirm", "active"):
                bot.reply_to(
                    message,
                    "‚ö†Ô∏è –î–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ (/new_wave) "
                    "–∏–ª–∏ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–æ–ª–Ω—ã."
                )
                upload_waiting[user_id] = False
                return
        else:  # –ø–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            if state["status"] != "awaiting_confirm":
                bot.reply_to(
                    message,
                    "‚ö†Ô∏è –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–æ–ª–Ω—ã (/new_wave)."
                )
                upload_waiting[user_id] = False
                return


            if upload_files_received.get(user_id, 0) == 0:
                upload_files_time[user_id] = time.time()
            upload_files_received[user_id] = upload_files_received.get(user_id, 0) + 1

            # --- –ì–ª–∞–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ —à–ª—ë–º –æ—à–∏–±–∫—É, –¥–∞–ª—å—à–µ –º–æ–ª—á–∏–º ---
            if upload_files_received[user_id] > 1:
                bot.reply_to(message, "‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ zip-—Ñ–∞–π–ª–æ–≤, –ø—Ä–∏—à–ª–∏ —Ç–æ–ª—å–∫–æ 1!")
                logger.info(f"User {user_id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ zip-—Ñ–∞–π–ª–∞ ‚Äî –æ—Ç–∫–∞–∑–∞–Ω–æ –±–µ–∑ –æ—à–∏–±–æ–∫.")
                # –°–±—Ä–æ—Å–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º!
                upload_waiting[user_id] = False
                upload_files_received.pop(user_id, None)
                upload_files_time.pop(user_id, None)
                return

            time_passed = time.time() - upload_files_time[user_id]
            if time_passed < 2:
                time.sleep(2 - time_passed)
                
            # –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞!
            if upload_files_received.get(user_id, 0) > 1 or not upload_waiting.get(user_id):
                # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –æ—à–∏–±–∫—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã
                return


            # –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º ZIP-—Ñ–∞–π–ª
            doc = message.document
            if not doc.file_name.endswith('.zip'):
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ (.zip).")
                upload_waiting[user_id] = False
                return
                        
            try:
                file_info = bot.get_file(doc.file_id)
                downloaded = bot.download_file(file_info.file_path)
                zip_path = f"temp_upload_{user_id}.zip"
                with open(zip_path, 'wb') as f:
                    f.write(downloaded)
        
                if mode is True:
                    report_path = process_zip(zip_path, uploaded_by=user_id, bot=bot)
                else:
                    report_path = process_zip_add(zip_path, uploaded_by=user_id, bot=bot)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if report_path:
                    with open(report_path, 'rb') as rep:
                        bot.send_document(message.chat.id, rep, caption="üìÑ –û—Ç—á—ë—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ –±–∏–ª–µ—Ç–æ–≤")
                    os.remove(report_path)

                # –£–¥–∞–ª—è–µ–º —Å–∞–º ZIP
                os.remove(zip_path)

            except Exception as e:
                bot.send_message(message.chat.id, "‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            finally:

                upload_waiting[user_id] = False
                upload_files_received.pop(user_id, None)
                upload_files_time.pop(user_id, None)

    @bot.message_handler(commands=['upload_zip_add'])
    @admin_required(bot)
    @admin_error_catcher(bot)
    def start_upload_add(message):
        ADMINS = load_admins()
        state = get_wave_state()
        if message.from_user.id not in ADMINS:
            return
        
        if state["status"] == "idle":
            bot.reply_to(
                message,
                "‚ö†Ô∏è –î–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ /new_wave (–≤ —Ä–µ–∂–∏–º–∞—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–æ–ª–Ω—ã)."
            )
        upload_waiting[message.from_user.id] = 'add'
        upload_files_received[message.from_user.id] = 0
        upload_files_time[message.from_user.id] = None
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ ZIP-—Ñ–∞–π–ª –¥–ª—è –î–û–ó–ê–ì–†–£–ó–ö–ò –±–∏–ª–µ—Ç–æ–≤ (—Å—Ç–∞—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è).")

    @bot.message_handler(commands=['force_give'])
    @admin_required(bot)
    @admin_error_catcher(bot)
    def handle_force_give(message):
        args = message.text.split()
        if len(args) != 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /force_give @username –∏–ª–∏ /force_give user_id")
            return

        user_ref = args[1]
        user_id = resolve_user_id(user_ref)
        if not user_id or not is_registered(user_id):
            bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        wave_start = get_latest_wave()
        wave_id = get_current_wave_id()
        if not wave_id or not wave_start:
            bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–æ–ª–Ω—ã.")
            return

        last_ticket = get_user_last_ticket_time(user_id)
        if last_ticket and last_ticket >= wave_start:
            bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –±–∏–ª–µ—Ç –≤ —ç—Ç–æ–π –≤–æ–ª–Ω–µ.")
            return

        ticket_path = get_free_ticket(wave_id)
        if not ticket_path:
            bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏.")
            return

        try:
            with open(ticket_path, "rb") as pdf:
                bot.send_document(user_id, pdf, caption="üéü –í–∞—à –±–∏–ª–µ—Ç –≤—ã–¥–∞–Ω –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            assign_ticket(ticket_path, user_id)
            bot.reply_to(message, f"‚úÖ –ë–∏–ª–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_ref}.")
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–¥–∞–ª –±–∏–ª–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —á–µ—Ä–µ–∑ /force_give.")
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏–ª–µ—Ç–∞: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –±–∏–ª–µ—Ç–∞ —á–µ—Ä–µ–∑ /force_give: {e}", exc_info=True)



# ==== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ tickets ====

def archive_old_tickets():
    # 1) –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ PDF –≤ –ø–∞–ø–∫–µ
    pdf_files = [
        f for f in os.listdir(DEFAULT_TICKET_FOLDER)
        if f.lower().endswith('.pdf')
    ]
    if not pdf_files:
        return None  # –Ω–µ—á–µ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å

    # 2) –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞–º–∏
    now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S_%f")
    archive_dir = "archive"
    temp_folder = os.path.join(archive_dir, f"_temp_{now}")
    zip_name = f"{now}.zip"
    zip_path = os.path.join(archive_dir, zip_name)

    os.makedirs(temp_folder, exist_ok=True)
    os.makedirs(archive_dir, exist_ok=True)

    # 3) –ü–µ—Ä–µ–º–µ—â–∞–µ–º PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    for file_name in pdf_files:
        src = os.path.join(DEFAULT_TICKET_FOLDER, file_name)
        dst = os.path.join(temp_folder, file_name)
        # --- –≤–æ—Ç –∑–¥–µ—Å—å!
        mark_ticket_archived_unused(src)
        os.rename(src, dst)

    # 4) –ó–∞–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ –Ω–æ–≤—ã–π ZIP
    with ZipFile(zip_path, 'w') as zipf:
        for file_name in os.listdir(temp_folder):
            zipf.write(os.path.join(temp_folder, file_name), arcname=file_name)

    # 5) –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    shutil.rmtree(temp_folder)

    # 6) RETENTION ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞—Ä—Ö–∏–≤–∞
    max_archives = 3
    archives = sorted(
        f for f in os.listdir(archive_dir)
        if f.lower().endswith('.zip')
    )
    if len(archives) > max_archives:
        for old in archives[:-max_archives]:
            try:
                os.remove(os.path.join(archive_dir, old))
            except OSError:
                pass

    return zip_path

def process_zip(zip_path, uploaded_by, bot):
    added, duplicates, not_pdf = [], [], []
    seen_hashes = set()  # –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
    temp_store = []

    # 1) –°–∫–∞–Ω–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤, —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    with ZipFile(zip_path, 'r') as zip_ref:
        for file_info in zip_ref.infolist():
            original_name = file_info.filename
            if not original_name.lower().endswith(".pdf"):
                not_pdf.append(original_name)
                continue

            content = zip_ref.read(file_info)
            file_hash = hashlib.sha256(content).hexdigest()

            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å
            if is_duplicate_hash(file_hash):
                duplicates.append(original_name)
                continue

            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ —Ç–∞–∫–æ–π –∂–µ —Ñ–∞–π–ª –≤ —ç—Ç–æ–º –∂–µ –∞—Ä—Ö–∏–≤–µ
            if file_hash in seen_hashes:
                duplicates.append(original_name)
                continue

            seen_hashes.add(file_hash)
            uuid_name = f"{uuid4()}.pdf"
            full_path = os.path.join(DEFAULT_TICKET_FOLDER, uuid_name)
            temp_store.append((content, file_hash, original_name, full_path, uuid_name))

    # 2) –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö PDF ‚Äî –æ—Ç–º–µ–Ω—è–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
    if not temp_store:
        bot.send_message(
            uploaded_by,
            "‚õîÔ∏è –í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç –Ω–æ–≤—ã—Ö PDF-—Ñ–∞–π–ª–æ–≤ (–≤—Å–µ –ª–∏–±–æ –¥—É–±–ª–∏–∫–∞—Ç—ã, –ª–∏–±–æ –Ω–µ PDF).",
            parse_mode="HTML"
        )
        return None

    # 3) –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –±–∏–ª–µ—Ç—ã (—Ç–æ–ª—å–∫–æ —Ä–∞–∑, –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö)
    archive_result = archive_old_tickets()
    if archive_result:
        bot.send_message(
            uploaded_by,
            f"üì¶ –°—Ç–∞—Ä—ã–µ –±–∏–ª–µ—Ç—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤:\n<code>{archive_result}</code>",
            parse_mode="HTML"
        )
        logger.info(f"–ê—Ä—Ö–∏–≤ —Å—Ç–∞—Ä—ã—Ö –±–∏–ª–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω: {archive_result}")

    # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ –≤–Ω–æ—Å–∏–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    for content, file_hash, original_name, full_path, uuid_name in temp_store:
        try:
            with open(full_path, "wb") as f:
                f.write(content)
            insert_ticket(full_path, file_hash, original_name, uploaded_by)
            added.append((original_name, uuid_name))
        except sqlite3.IntegrityError:
            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ –≤–¥—Ä—É–≥ hash —É—Å–ø–µ–ª –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            duplicates.append(original_name)

    # 5) –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—á—ë—Ç
    report_lines = [
        "=== –û—Ç—á—ë—Ç –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –±–∏–ª–µ—Ç–æ–≤ ===",
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(added)}",
        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}",
        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ PDF: {len(not_pdf)}",
        ""
    ]
    if added:
        report_lines.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã:")
        report_lines += [f"- {orig} ‚Üí {new}" for orig, new in added]
    if duplicates:
        report_lines.append("\n‚ôªÔ∏è –î—É–±–ª–∏–∫–∞—Ç—ã:")
        report_lines += [f"- {name}" for name in duplicates]
    if not_pdf:
        report_lines.append("\n‚ùå –ù–µ PDF:")
        report_lines += [f"- {name}" for name in not_pdf]

    report_text = "\n".join(report_lines)
    with tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.txt', encoding='utf-8') as temp_file:
        temp_file.write(report_text)
        return temp_file.name
    

def process_zip_add(zip_path, uploaded_by, bot):
    added, duplicates, not_pdf = [], [], []
    seen_hashes = set()

    from database import is_duplicate_hash, insert_ticket

    with ZipFile(zip_path, 'r') as zip_ref:
        for file_info in zip_ref.infolist():
            original_name = file_info.filename
            if not original_name.lower().endswith(".pdf"):
                not_pdf.append(original_name)
                continue
            content = zip_ref.read(file_info)
            file_hash = hashlib.sha256(content).hexdigest()
            if is_duplicate_hash(file_hash):
                duplicates.append(original_name)
                continue
            if file_hash in seen_hashes:
                duplicates.append(original_name)
                continue
            seen_hashes.add(file_hash)
            uuid_name = f"{uuid4()}.pdf"
            full_path = os.path.join(DEFAULT_TICKET_FOLDER, uuid_name)
            with open(full_path, "wb") as f:
                f.write(content)
            insert_ticket(full_path, file_hash, original_name, uploaded_by)
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∏–ª–µ—Ç –∫ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–æ–ª–Ω–µ
            wave_id = get_current_wave_id()
            conn = sqlite3.connect("users.db")
            cur = conn.cursor()
            cur.execute(
                "UPDATE tickets SET wave_id = ? WHERE file_path = ?",
                (wave_id, full_path)
            )
            conn.commit()
            conn.close()
            added.append((original_name, uuid_name))

    report_lines = [
        "=== –û—Ç—á—ë—Ç –ø–æ –î–û–ó–ê–ì–†–£–ó–ö–ï –±–∏–ª–µ—Ç–æ–≤ ===",
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(added)}",
        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}",
        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ PDF: {len(not_pdf)}",
        ""
    ]
    if added:
        report_lines.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã:")
        report_lines += [f"- {orig} ‚Üí {new}" for orig, new in added]
    if duplicates:
        report_lines.append("\n‚ôªÔ∏è –î—É–±–ª–∏–∫–∞—Ç—ã:")
        report_lines += [f"- {name}" for name in duplicates]
    if not_pdf:
        report_lines.append("\n‚ùå –ù–µ PDF:")
        report_lines += [f"- {name}" for name in not_pdf]

    report_text = "\n".join(report_lines)
    with tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.txt', encoding='utf-8') as temp_file:
        temp_file.write(report_text)
        return temp_file.name
