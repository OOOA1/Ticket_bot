from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from .utils import load_admins
import time
from database import get_all_user_ids
import logging

logger = logging.getLogger(__name__)

def menu_error_catcher(func):
    def wrapper(message, *args, **kwargs):
        try:
            return func(message, *args, **kwargs)
        except Exception as e:
            if "message to be replied not found" in str(e):
                logger.warning(f"[MENU] –û—à–∏–±–∫–∞ reply_to: {e}")
                bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ –º–µ–Ω—é {func.__name__}: {e}", exc_info=True)
                bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    return wrapper

def register_admin_menu(bot):
    awaiting_args = {}  # user_id: {'cmd': ..., 'step': ...}

    def emulate_command(bot, call, command_text):
        msg_dict = {
            "message_id": call.message.message_id + 1234567,
            "from": {
                "id": call.from_user.id,
                "is_bot": False,
                "first_name": getattr(call.from_user, "first_name", ""),
                "username": getattr(call.from_user, "username", ""),
            },
            "date": call.message.date,
            "chat": {
                "id": call.from_user.id,  # <-- –≤—Å–µ–≥–¥–∞ user_id!
                "type": "private",
                "first_name": getattr(call.from_user, "first_name", ""),
                "username": getattr(call.from_user, "username", "")
            },
            "text": command_text
        }
        msg = Message.de_json(msg_dict)
        bot.process_new_messages([msg])
        bot.answer_callback_query(call.id)

    @bot.message_handler(commands=['menu'])
    @menu_error_catcher
    def admin_menu_handler(message):
        logger.info(f"[MENU] –ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é.")
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é.")
            return

        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("üîë –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã", callback_data="menu_admin_cmds"),
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="menu_users"),
            InlineKeyboardButton("üí¨ –õ–æ–≥–∏", callback_data="menu_logs"),
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∏", callback_data="menu_broadcast"),
            InlineKeyboardButton("üìä –û—Ç—á—ë—Ç—ã", callback_data="menu_reports"),
            InlineKeyboardButton("‚ÑπÔ∏è –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º", callback_data="menu_problems")
        )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

    def send_main_menu(chat_id):
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("üîë –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã", callback_data="menu_admin_cmds"),
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="menu_users"),
            InlineKeyboardButton("üí¨ –õ–æ–≥–∏", callback_data="menu_logs"),
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∏", callback_data="menu_broadcast"),
            InlineKeyboardButton("üìä –û—Ç—á—ë—Ç—ã", callback_data="menu_reports"),
            InlineKeyboardButton("‚ÑπÔ∏è –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º", callback_data="menu_problems")
        )
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
    @menu_error_catcher
    def back_to_main_handler(call):
        logger.info(f"[MENU] –ê–¥–º–∏–Ω {call.from_user.id} ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        ADMINS = load_admins()
        if call.from_user.id not in ADMINS:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
            return
        try:
            bot.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", call.message.chat.id, call.message.message_id, reply_markup=None)
        except Exception as e:
            logger.warning(f"[MENU] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: {e}")
        send_main_menu(call.message.chat.id)

    # ==== –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤ ====

    @bot.callback_query_handler(func=lambda call: call.data == "menu_admin_cmds")
    @menu_error_catcher
    def menu_admin_cmds(call):
        logger.info(f"[MENU] {call.from_user.id} ‚Äî —Ä–∞–∑–¥–µ–ª '–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã'.")
        ADMINS = load_admins()
        if call.from_user.id not in ADMINS:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
            return
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–ù–æ–≤–∞—è –≤–æ–ª–Ω–∞", callback_data="cmd_new_wave"),
            InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–ª–µ—Ç—ã (ZIP)", callback_data="cmd_upload_zip"),
            InlineKeyboardButton("–î–æ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–ª–µ—Ç—ã (ZIP)", callback_data="cmd_upload_zip_add"),
            InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–ª–Ω—É", callback_data="cmd_confirm_wave"),
            InlineKeyboardButton("–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –±–∏–ª–µ—Ç–æ–≤", callback_data="cmd_send_tickets"),
            InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–ª–Ω—É", callback_data="cmd_end_wave"),
            InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–ª–Ω–µ", callback_data="cmd_stats"),
            InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤", callback_data="cmd_list_tickets"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.edit_message_text("üîë –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –≤–æ–ª–Ω–∞–º–∏ –∏ –±–∏–ª–µ—Ç–∞–º–∏:", call.message.chat.id, call.message.message_id, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "menu_users")
    @menu_error_catcher
    def menu_users(call):
        logger.info(f"[MENU] {call.from_user.id} ‚Äî —Ä–∞–∑–¥–µ–ª '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'.")
        ADMINS = load_admins()
        if call.from_user.id not in ADMINS:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
            return
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–∞–π—Ç—ã", callback_data="cmd_gen_invites"),
            InlineKeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="cmd_export_users"),
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="cmd_add_admin"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="cmd_remove_admin"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="cmd_delete_user"),
            InlineKeyboardButton("–£–∑–Ω–∞—Ç—å —Å–≤–æ–π user_id", callback_data="cmd_myid"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.edit_message_text("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –¥–æ—Å—Ç—É–ø–∞–º–∏:", call.message.chat.id, call.message.message_id, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "menu_logs")
    @menu_error_catcher
    def menu_logs(call):
        logger.info(f"[MENU] {call.from_user.id} ‚Äî —Ä–∞–∑–¥–µ–ª '–õ–æ–≥–∏'.")
        ADMINS = load_admins()
        if call.from_user.id not in ADMINS:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
            return
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å chatlog", callback_data="cmd_chatlog"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.edit_message_text("üí¨ –õ–æ–≥–∏ –∏ –∞—É–¥–∏—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏:", call.message.chat.id, call.message.message_id, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "menu_broadcast")
    @menu_error_catcher
    def menu_broadcast(call):
        logger.info(f"[MENU] {call.from_user.id} ‚Äî —Ä–∞–∑–¥–µ–ª '–†–∞—Å—Å—ã–ª–∫–∏'.")
        ADMINS = load_admins()
        if call.from_user.id not in ADMINS:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
            return
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="cmd_broadcast"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.edit_message_text("üì¢ –†–∞—Å—Å—ã–ª–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", call.message.chat.id, call.message.message_id, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "menu_reports")
    @menu_error_catcher
    def menu_reports(call):
        logger.info(f"[MENU] {call.from_user.id} ‚Äî —Ä–∞–∑–¥–µ–ª '–û—Ç—á—ë—Ç—ã'.")
        ADMINS = load_admins()
        if call.from_user.id not in ADMINS:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
            return
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("Failed-–æ—Ç—á—ë—Ç –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ –±–∏–ª–µ—Ç–æ–≤", callback_data="cmd_failed_report"),
            InlineKeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="cmd_export_users"),
            InlineKeyboardButton("–≠–∫—Å–ø–æ—Ä—Ç –±–∏–ª–µ—Ç–æ–≤", callback_data="cmd_list_tickets"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.edit_message_text("üìä –û—Ç—á—ë—Ç—ã:", call.message.chat.id, call.message.message_id, reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data == "menu_problems")
    @menu_error_catcher
    def menu_problems(call):
        logger.info(f"[MENU] {call.from_user.id} ‚Äî —Ä–∞–∑–¥–µ–ª '–í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º'.")
        ADMINS = load_admins()
        if call.from_user.id not in ADMINS:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
            return
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–§–æ—Ä—Å-–≤—ã–¥–∞—á–∞ –±–∏–ª–µ—Ç–∞", callback_data="cmd_force_give"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –±–∏–ª–µ—Ç—ã", callback_data="cmd_delete_all"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        )
        bot.edit_message_text("‚ÑπÔ∏è –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:", call.message.chat.id, call.message.message_id, reply_markup=markup)

    # ==== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π callback –¥–ª—è –∫–æ–º–∞–Ω–¥ ====
    @bot.callback_query_handler(func=lambda call: call.data.startswith("cmd_"))
    @menu_error_catcher
    def command_button_handler(call):
        logger.info(f"[MENU] {call.from_user.id} –Ω–∞–∂–∞–ª {call.data}")
        ADMINS = load_admins()
        if call.from_user.id not in ADMINS:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∞–≤.")
            return

        data = call.data
        user_id = call.from_user.id

        # –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞)
        arg_cmds = {
            "cmd_broadcast": "broadcast",
            "cmd_gen_invites": "gen_invites",
            "cmd_chatlog": "chatlog",
            "cmd_force_give": "force_give",
            "cmd_delete_user": "delete_user",
            "cmd_add_admin": "add_admin",
            "cmd_remove_admin": "remove_admin",
        }

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç
        if data in arg_cmds:
            awaiting_args[user_id] = arg_cmds[data]
            prompts = {
                "broadcast": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é:",
                "gen_invites": "–°–∫–æ–ª—å–∫–æ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?",
                "chatlog": "–í–≤–µ–¥–∏—Ç–µ user_id –∏–ª–∏ @username –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chatlog:",
                "force_give": "–í–≤–µ–¥–∏—Ç–µ user_id –∏–ª–∏ @username –¥–ª—è —Ä—É—á–Ω–æ–π –≤—ã–¥–∞—á–∏ –±–∏–ª–µ—Ç–∞:",
                "delete_user": "–í–≤–µ–¥–∏—Ç–µ: user_id –∏ @username —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456 @user):",
                "add_admin": "–í–≤–µ–¥–∏—Ç–µ @username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                "remove_admin": "–í–≤–µ–¥–∏—Ç–µ @username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            }
            logger.info(f"[MENU] {call.from_user.id} ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {arg_cmds[data]}")
            bot.send_message(call.message.chat.id, prompts[arg_cmds[data]])
            bot.answer_callback_query(call.id)
            return

        # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
        commands_map = {
            "cmd_new_wave": "/new_wave",
            "cmd_upload_zip": "/upload_zip",
            "cmd_upload_zip_add": "/upload_zip_add",
            "cmd_confirm_wave": "/confirm_wave",
            "cmd_send_tickets": "/send_tickets",
            "cmd_end_wave": "/end_wave",
            "cmd_stats": "/stats",
            "cmd_list_tickets": "/list_tickets",

            "cmd_export_users": "/export_users",
            "cmd_failed_report": "/failed_report",
            "cmd_delete_all": "/delete_all",
        }
        if data in commands_map:
            logger.info(f"[MENU] {call.from_user.id} ‚Äî —ç–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã {commands_map[data]}")
            emulate_command(bot, call, commands_map[data])
        else:
            logger.info(f"[MENU] {call.from_user.id} –Ω–∞–∂–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É {data}")
            bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

    # === Handler –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ===
    def get_log_value(message):
        if message.content_type == 'document':
            return f"[DOCUMENT] {getattr(message.document, 'file_name', '')}"
        elif message.content_type == 'photo':
            return "[PHOTO]"
        elif message.content_type == 'animation':
            return "[ANIMATION]"
        elif message.content_type == 'video':
            return "[VIDEO]"
        elif message.content_type == 'audio':
            return "[AUDIO]"
        else:
            return getattr(message, 'text', '') or getattr(message, 'caption', '')


    @bot.message_handler(
        func=lambda m: m.from_user.id in awaiting_args,
        content_types=['text', 'photo', 'animation', 'document', 'video', 'audio']
    )
    @menu_error_catcher        
    def handle_argument_input(message):
        user_id = message.from_user.id
        cmd = awaiting_args.get(user_id)
        if not cmd:
            return
        del awaiting_args[user_id]
        logger.info(f"[MENU] {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {cmd}: {get_log_value(message)}")

        if cmd == "broadcast":
            send_file_to_all(bot, message)
            return

        # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        elif cmd == "chatlog":
            msg = message
            msg.text = f"/chatlog {message.text.strip()}"
            bot.process_new_messages([msg])
            return

        elif cmd == "gen_invites":
            msg = message
            msg.text = f"/gen_invites {message.text.strip()}"
            bot.process_new_messages([msg])
            return

        elif cmd == "force_give":
            msg = message
            msg.text = f"/force_give {message.text.strip()}"
            bot.process_new_messages([msg])
            return

        elif cmd == "delete_user":
            msg = message
            msg.text = f"/delete_user {message.text.strip()}"
            bot.process_new_messages([msg])
            return

        elif cmd == "add_admin":
            msg = message
            msg.text = f"/add_admin {message.text.strip()}"
            bot.process_new_messages([msg])
            return

        elif cmd == "remove_admin":
            msg = message
            msg.text = f"/remove_admin {message.text.strip()}"
            bot.process_new_messages([msg])
            return

        else:
            msg = message
            bot.process_new_messages([msg])
            return

def send_file_to_all(bot, message):
    user_ids = get_all_user_ids()
    success, fail = 0, 0
    failed_ids = []
    sent_ids = []
    caption = (getattr(message, 'caption', '') or '').strip()

    if message.content_type == 'photo':
        media_id = message.photo[-1].file_id
        for user_id in user_ids:
            try:
                bot.send_photo(user_id, media_id, caption=caption)
                success += 1
                sent_ids.append(user_id)
            except Exception as e:
                fail += 1
                failed_ids.append(user_id)
            time.sleep(0.04)
        bot.send_message(message.chat.id, f"üì∏ –§–æ—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ {success} / ‚ùå {fail}")

    elif message.content_type == 'animation':
        media_id = message.animation.file_id
        for user_id in user_ids:
            try:
                bot.send_animation(user_id, media_id, caption=caption)
                success += 1
                sent_ids.append(user_id)
            except Exception as e:
                fail += 1
                failed_ids.append(user_id)
            time.sleep(0.04)
        bot.send_message(message.chat.id, f"üéû GIF-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ {success} / ‚ùå {fail}")

    elif message.content_type == 'document':
        media_id = message.document.file_id
        file_name = getattr(message.document, 'file_name', 'document')
        for user_id in user_ids:
            try:
                bot.send_document(user_id, media_id, caption=caption)
                success += 1
                sent_ids.append(user_id)
            except Exception as e:
                fail += 1
                failed_ids.append(user_id)
            time.sleep(0.04)
        bot.send_message(message.chat.id, f"üìÑ –†–∞—Å—Å—ã–ª–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ {success} / ‚ùå {fail}")

    elif message.content_type == 'video':
        media_id = message.video.file_id
        for user_id in user_ids:
            try:
                bot.send_video(user_id, media_id, caption=caption)
                success += 1
                sent_ids.append(user_id)
            except Exception as e:
                fail += 1
                failed_ids.append(user_id)
            time.sleep(0.04)
        bot.send_message(message.chat.id, f"üé¨ –í–∏–¥–µ–æ-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ {success} / ‚ùå {fail}")

    elif message.content_type == 'audio':
        media_id = message.audio.file_id
        for user_id in user_ids:
            try:
                bot.send_audio(user_id, media_id, caption=caption)
                success += 1
                sent_ids.append(user_id)
            except Exception as e:
                fail += 1
                failed_ids.append(user_id)
            time.sleep(0.04)
        bot.send_message(message.chat.id, f"üéµ –ê—É–¥–∏–æ-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ {success} / ‚ùå {fail}")

    elif message.content_type == 'text':
        text = message.text.strip()
        if text.startswith("/broadcast"):
            text = text[len("/broadcast"):].strip()
        if not text:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /broadcast —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ –º–µ–¥–∏–∞.")
            return
        for user_id in user_ids:
            try:
                bot.send_message(user_id, text)
                success += 1
                sent_ids.append(user_id)
            except Exception as e:
                fail += 1
                failed_ids.append(user_id)
            time.sleep(0.04)
        bot.send_message(message.chat.id, f"üí¨ –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ {success} / ‚ùå {fail}")
    else:
        bot.send_message(message.chat.id, "–≠—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!")


