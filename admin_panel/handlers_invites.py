import os
from admin_panel.invite_admin import export_users_xlsx
from .utils import admin_error_catcher, admin_required, logger
from database import get_admins, is_admin, delete_user_everywhere
from admin_panel.invite_admin import generate_invites, export_invites_xlsx
import logging
logger = logging.getLogger(__name__)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
awaiting_delete_confirm = {}  # {admin_id: (user_id, username)}

def register_invites_handlers(bot):
    @bot.message_handler(commands=['gen_invites'])
    @admin_required(bot)
    @admin_error_catcher(bot)
    def handle_gen_invites(message):
        logger.info("–ö–æ–º–∞–Ω–¥–∞ /gen_invites –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %d", message.from_user.id)
        ADMINS = get_admins()
        if message.from_user.id not in ADMINS:
            return

        args = message.text.strip().split()
        if len(args) == 2 and args[1].isdigit():
            count = int(args[1])
            if not (1 <= count <= 5000):
                bot.send_message(message.chat.id, "–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ—Ç 1 –¥–æ 5000 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞ —Ä–∞–∑.")
                return

            codes = generate_invites(count)
            temp_path = export_invites_xlsx(codes)

            with open(temp_path, "rb") as doc:
                bot.send_document(message.chat.id, doc, caption=f"–ì–æ—Ç–æ–≤–æ! {count} —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.")
            os.remove(temp_path)

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {count} –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–≤, —Ñ–∞–π–ª: {temp_path}")

            for admin_id in ADMINS:
                try:
                    admin_id = int(admin_id)
                    if admin_id == message.from_user.id:
                        continue
                    if admin_id <= 0:
                        continue
                    bot.send_message(
                        admin_id,
                        f"üîë @{message.from_user.username} —Å–æ–∑–¥–∞–ª {count} –Ω–æ–≤—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π."
                    )
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        else:
            bot.send_message(
                message.chat.id,
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /gen_invites <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> (–æ—Ç 1 –¥–æ 5000)\n\n"
                "–ü—Ä–∏–º–µ—Ä: /gen_invites 10"
            )



    @bot.message_handler(commands=['export_users'])
    @admin_required(bot)
    @admin_error_catcher(bot)
    def export_users_handler(message):
        logger.info("–ö–æ–º–∞–Ω–¥–∞ /export_users –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %d", message.from_user.id)
        ADMINS = get_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤
        path, user_count, admin_count = export_users_xlsx()
        logger.info("–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –≤—Å–µ–≥–æ=%d, –∞–¥–º–∏–Ω–æ–≤=%d, —Ñ–∞–π–ª=%s", user_count, admin_count, path)

        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî —Å—Ä–∞–∑—É –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
        if user_count == 0:
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî –Ω–µ—á–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å."
            )
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            try:
                os.remove(path)
            except OSError:
                pass
            return

        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
        with open(path, "rb") as doc:
            bot.send_document(
                message.chat.id,
                doc,
                caption=f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\nüîë –ê–¥–º–∏–Ω–æ–≤: {admin_count}"
            )

        # –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(path)
        except OSError:
            pass

    @bot.message_handler(commands=['delete_user'])
    @admin_required(bot)
    @admin_error_catcher(bot)
    def handle_delete_user(message):
        args = message.text.split()
        admin_id = message.from_user.id

        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ ‚Äî user_id (—Ü–∏—Ñ—Ä—ã) –∏ @username
        if len(args) != 3 or not args[1].isdigit() or not args[2].startswith("@"):
            bot.reply_to(
                message,
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_user user_id @username (user_id ‚Äî —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, @username ‚Äî —Å @)"
            )
            return

        user_id_str = args[1]
        username = args[2]

        if not user_id_str.isdigit():
            bot.reply_to(message, "user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: /delete_user 123456789 @username")
            return

        user_id = int(user_id_str)

        if is_admin(user_id):
            bot.reply_to(message, "‚ùóÔ∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        awaiting_delete_confirm[admin_id] = (user_id, username)
        bot.send_message(
            message.chat.id,
            f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}? –û—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'."
        )

    @bot.message_handler(func=lambda m: m.text and m.text.strip().lower() in ["–¥–∞", "–Ω–µ—Ç"])
    @admin_required(bot)
    @admin_error_catcher(bot)
    def handle_delete_confirm(message):
        admin_id = message.from_user.id

        if admin_id not in awaiting_delete_confirm:
            return  # –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

        user_id, username = awaiting_delete_confirm[admin_id]
        answer = message.text.strip().lower()

        if answer == "–Ω–µ—Ç":
            bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            del awaiting_delete_confirm[admin_id]
            return

        if answer == "–¥–∞":
            success = delete_user_everywhere(user_id, username)
            if success:
                bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü.")
                logger.info(f"–ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username}) —á–µ—Ä–µ–∑ /delete_user")
            else:
                bot.send_message(message.chat.id, f"‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.")
            del awaiting_delete_confirm[admin_id]
            return
