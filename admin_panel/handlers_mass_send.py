from database import (
    get_all_user_ids,
    get_user_last_ticket_time,
    get_free_ticket,
    assign_ticket,
    reserve_ticket_for_user,
    add_failed_delivery,
    remove_failed_delivery,
    get_admins,
    get_all_failed_deliveries,
    clear_failed_deliveries,
    get_wave_state,
    get_current_wave_id,
)
from .utils import load_admins, logger
from datetime import datetime
import time
import os

def register_mass_send_handler(bot):
    @bot.message_handler(commands=['send_tickets'])
    def handle_send_tickets(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
            return

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ª–Ω—ã
        state = get_wave_state()
        if state["status"] != "active":
            bot.reply_to(message, "‚ö†Ô∏è –í–æ–ª–Ω–∞ –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /confirm_wave.")
            return

        wave_start = datetime.fromisoformat(state["wave_start"])
        wave_id = get_current_wave_id()
        if not wave_id:
            bot.reply_to(message, "‚ùóÔ∏è –¢–µ–∫—É—â–∞—è –≤–æ–ª–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = get_all_user_ids()
        admins = set(get_admins())
        user_ids = [uid for uid in all_users if uid not in admins]

        clear_failed_deliveries()
        failed_dict = dict(get_all_failed_deliveries())

        sent_count = 0
        failed_count = 0
        already_count = 0
        start_time = time.time()
        failed_this_time = []

        for idx, user_id in enumerate(user_ids, 1):
            last_ticket = get_user_last_ticket_time(user_id)
            if last_ticket and last_ticket >= wave_start:
                already_count += 1
                continue 

            # 3. –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏–ª–µ—Ç –∏–ª–∏ –±–µ—Ä—ë–º –Ω–æ–≤—ã–π –∏–∑ —Ç–µ–∫—É—â–µ–π –≤–æ–ª–Ω—ã
            ticket_path = failed_dict.get(user_id)
            if not ticket_path:
                ticket_path = get_free_ticket(wave_id)
                if not ticket_path:
                    bot.send_message(
                        message.chat.id,
                        f"üéü –ë–∏–ª–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                        f"–£—Å–ø–µ—à–Ω–æ: {sent_count}, –æ—à–∏–±–æ–∫: {failed_count}, —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏: {already_count}"
                    )
                    logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –±–∏–ª–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
                    break
                reserve_ticket_for_user(ticket_path, user_id)
                add_failed_delivery(user_id, ticket_path)

            if not os.path.isfile(ticket_path):
                failed_count += 1
                err_msg = f"‚ùå –§–∞–π–ª –±–∏–ª–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {ticket_path}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {user_id}."
                bot.send_message(message.chat.id, err_msg)
                logger.error(err_msg)
                failed_this_time.append(user_id)
                continue

            # 4. –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (—Å —Ä–µ—Ç—Ä–∞–µ–º)
            try:
                with open(ticket_path, 'rb') as pdf:
                    bot.send_document(user_id, pdf)
                assign_ticket(ticket_path, user_id)
                remove_failed_delivery(user_id)
                sent_count += 1
                logger.info(f"‚úÖ –ë–∏–ª–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω user_id={user_id} [{idx}/{len(user_ids)}]")
            except Exception as e:
                logger.warning(f"–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞ –¥–ª—è user_id={user_id}")
                time.sleep(5)
                try:
                    with open(ticket_path, 'rb') as pdf:
                        bot.send_document(user_id, pdf)
                    assign_ticket(ticket_path, user_id)
                    remove_failed_delivery(user_id)
                    sent_count += 1
                    logger.info(f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω user_id={user_id} [{idx}/{len(user_ids)}]")
                except Exception as e2:
                    failed_count += 1
                    err_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ user_id={user_id}: {e2}"
                    bot.send_message(message.chat.id, err_msg)
                    logger.error(err_msg, exc_info=True)
                    failed_this_time.append(user_id)
                    continue

            time.sleep(5)

        total_time = int(time.time() - start_time)
        pending_after = get_all_failed_deliveries()
        pending_count = len(pending_after)

        result_msg = (
            f"üì¶ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
            f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –ø–æ–ª—É—á–∞–ª–∏): {already_count}\n"
            f"üïì –í—Ä–µ–º—è: {total_time} —Å–µ–∫.\n"
            f"üì≠ –û–∂–∏–¥–∞—é—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {pending_count}"
        )
        bot.send_message(message.chat.id, result_msg)
        logger.info(result_msg)

        # --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ---
        if pending_count > 0:
            bot.send_message(message.chat.id, "‚ôªÔ∏è –ü—Ä–æ–±—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã...")
            retry_sent = 0
            retry_failed = 0
            start_time_retry = time.time()
            for user_id, ticket_path in get_all_failed_deliveries():
                if not os.path.isfile(ticket_path):
                    retry_failed += 1
                    err_msg = f"–§–∞–π–ª –±–∏–ª–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {ticket_path}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}."
                    bot.send_message(message.chat.id, err_msg)
                    logger.error(err_msg)
                    continue

                try:
                    with open(ticket_path, 'rb') as pdf:
                        bot.send_document(user_id, pdf)
                    assign_ticket(ticket_path, user_id)
                    remove_failed_delivery(user_id)
                    retry_sent += 1
                    logger.info(f"[AUTO-RETRY] –ë–∏–ª–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω user_id={user_id}")
                except Exception as e:
                    retry_failed += 1
                    err_msg = f"[AUTO-RETRY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª—è user_id={user_id}: {e}"
                    bot.send_message(message.chat.id, err_msg)
                    logger.error(err_msg, exc_info=True)
                    continue

                time.sleep(5)

            total_time_retry = int(time.time() - start_time_retry)
            pending_after_retry = get_all_failed_deliveries()
            bot.send_message(
                message.chat.id,
                f"‚ôªÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {retry_sent}\n"
                f"–û—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ: {retry_failed}\n"
                f"–û–∂–∏–¥–∞—é—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞: {len(pending_after_retry)}\n"
                f"–í—Ä–µ–º—è –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞: {total_time_retry} —Å–µ–∫."
            )
            logger.info(
                f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ={retry_sent}, –æ—à–∏–±–æ–∫={retry_failed}, –æ—Å—Ç–∞–ª–æ—Å—å={len(pending_after_retry)}"
            )
