import time
import os
import re
import random
import sqlite3
import tempfile
import xlsxwriter

from database import (
    get_all_user_ids,
    get_user_last_ticket_time,
    get_free_ticket,
    assign_ticket,
    reserve_ticket_for_user,
    add_failed_delivery,
    remove_failed_delivery,
    get_admins,
    get_all_failed_deliveries,
    clear_failed_deliveries,
    get_wave_state,
    get_current_wave_id,
    mark_ticket_lost,
    release_ticket,
    clear_user_assignments,
    resolve_user_id,
)
from .utils import load_admins, logger, admin_required, admin_error_catcher, log_chat
from datetime import datetime
import logging
logger = logging.getLogger(__name__)

# === Telegram 429 –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===
def try_send_with_telegram_limit(send_func, *args, **kwargs):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ/–¥–æ–∫—É–º–µ–Ω—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç 429 Too Many Requests.
    send_func ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, bot.send_document)
    *args, **kwargs ‚Äî –µ—ë –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """
    for attempt in range(2):  # –º–∞–∫—Å–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è + –æ–¥–Ω–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è)
        try:
            return send_func(*args, **kwargs)
        except Exception as e:
            err = str(e)
            # –ò—â–µ–º retry after –≤ –æ—à–∏–±–∫–µ (TelegramAPIError: Too Many Requests: retry after 27)
            if "retry after" in err:
                try:
                    retry_after = int(re.search(r'retry after (\d+)', err).group(1))
                    time.sleep(retry_after + 1)
                except Exception:
                    time.sleep(5)
            else:
                if attempt == 0:
                    time.sleep(5)  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–∞—É–∑–∞ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–∏–º–∏—Ç
                else:
                    raise  # –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ

def register_mass_send_handler(bot):
    @bot.message_handler(commands=['send_tickets'])
    def handle_send_tickets(message):
        logger.info("–ö–æ–º–∞–Ω–¥–∞ /send_tickets –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %d", message.from_user.id)
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ª–Ω—ã
        state = get_wave_state()
        if state["status"] != "active":
            bot.reply_to(message, "‚ö†Ô∏è –í–æ–ª–Ω–∞ –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /confirm_wave.")
            return

        wave_start = datetime.fromisoformat(state["wave_start"])
        wave_id = get_current_wave_id()
        if not wave_id:
            bot.reply_to(message, "‚ùóÔ∏è –¢–µ–∫—É—â–∞—è –≤–æ–ª–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = get_all_user_ids()
        admins = set(get_admins())
        user_ids = [uid for uid in all_users if uid not in admins]

        clear_failed_deliveries()
        failed_dict = dict(get_all_failed_deliveries())

        sent_count = 0
        failed_count = 0
        already_count = 0
        start_time = time.time()
        failed_this_time = []
        logger.info("–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏: –≤–æ–ª–Ω–∞ %d, –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π %d", wave_id, len(user_ids))

        for idx, user_id in enumerate(user_ids, 1):
            last_ticket = get_user_last_ticket_time(user_id)
            if last_ticket and last_ticket >= wave_start:
                already_count += 1
                continue 

            # 3. –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏–ª–µ—Ç –∏–ª–∏ –±–µ—Ä—ë–º –Ω–æ–≤—ã–π –∏–∑ —Ç–µ–∫—É—â–µ–π –≤–æ–ª–Ω—ã
            ticket_path = failed_dict.get(user_id)
            if not ticket_path:
                ticket_path = get_free_ticket(wave_id)
                if not ticket_path:
                    bot.send_message(
                        message.chat.id,
                        f"üéü –ë–∏–ª–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
                        f"–£—Å–ø–µ—à–Ω–æ: {sent_count}, –æ—à–∏–±–æ–∫: {failed_count}, —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏: {already_count}"
                    )
                    logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –±–∏–ª–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
                    break
                clear_user_assignments(user_id, current_wave_id=wave_id)
                reserve_ticket_for_user(ticket_path, user_id)
                add_failed_delivery(user_id, ticket_path)

            if not os.path.isfile(ticket_path):
                # –®–∞–≥ 1: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                        logger.error("–§–∞–π–ª –±–∏–ª–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: %s –¥–ª—è user_id=%d", ticket_path, user_id)
                        add_failed_delivery(user_id, ticket_path)
                        for admin_id in get_admins():
                            try:
                                bot.send_message(
                                    admin_id,
                                    f"‚ùå –§–∞–π–ª –±–∏–ª–µ—Ç–∞ –¥–ª—è user_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω: {ticket_path}.\n"
                                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ failed_deliveries."
                                )
                            except:
                                pass
                        bot.send_message(
                            message.chat.id,
                            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
                        )
                        failed_count += 1
                        logger.error(f"‚ùå –§–∞–π–ª –±–∏–ª–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {ticket_path} –¥–ª—è user_id={user_id}")
                        failed_this_time.append(user_id)
                        continue

            # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å 3 –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –±—ç–∫–æ—Ñ—Ñ–æ–º
            max_retries = 3
            delay = 5
            for attempt in range(1, max_retries + 1):
                try:
                    with open(ticket_path, 'rb') as pdf:
                        try_send_with_telegram_limit(bot.send_document, user_id, pdf)
                    assign_ticket(ticket_path, user_id)
                    remove_failed_delivery(user_id)
                    log_chat(user_id, "BOT", f"[DOCUMENT] {os.path.basename(ticket_path)}")
                    sent_count += 1

                    if sent_count == 1 or sent_count % 20 == 0:
                        bot.send_message(
                            message.chat.id,
                            f"–†–∞—Å—Å—ã–ª–∫–∞: —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(user_ids)} –±–∏–ª–µ—Ç–æ–≤."
                        )
                    logger.info(f"‚úÖ –ë–∏–ª–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω user_id={user_id} [{idx}/{len(user_ids)}], –ø–æ–ø—ã—Ç–∫–∞ {attempt}")
                    time.sleep(random.uniform(3.5, 5.0))
                    break
                except Exception as e:
                    err = str(e).lower()
                    # 1) –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±–æ—Ç –∏–ª–∏ 403 ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    if "403" in err or "bot was blocked" in err:
                        add_failed_delivery(user_id, ticket_path)
                        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∏–ª–µ—Ç –≤ –ø—É–ª
                        release_ticket(ticket_path)
                        bot.send_message(
                            message.chat.id,
                            f"‚ùå user_id={user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ë–∏–ª–µ—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –ø—É–ª."
                        )
                        logger.error(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω user_id={user_id}: {e}")
                        failed_count += 1
                        failed_this_time.append(user_id)
                        break
                    
                    # 2) –ø—Ä–æ–≤–µ—Ä—è–µ–º retry-after –¥–ª—è 429
                    m = re.search(r'retry after (\d+)', err)
                    wait = (int(m.group(1)) + 1) if m else delay
                    # 3) –µ—Å–ª–∏ –µ—â—ë –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏ ‚Äî –∂–¥—ë–º –∏ —É–¥–≤–∞–∏–≤–∞–µ–º delay
                    if attempt < max_retries:
                        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è user_id={user_id}: {e}. –ñ–¥—ë–º {wait} —Å–µ–∫.")
                        time.sleep(wait)
                        delay *= 2
                        continue
                    
                    # 4) –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã ‚Äî —Ä–µ—à–∞–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é —Ñ–∞–π–ª–∞
                    if not os.path.isfile(ticket_path):
                        add_failed_delivery(user_id, ticket_path)
                        mark_ticket_lost(ticket_path)
                        bot.send_message(
                            message.chat.id,
                            f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ticket_path}. –ë–∏–ª–µ—Ç –ø–æ–º–µ—á–µ–Ω LOST."
                        )
                    else:
                        add_failed_delivery(user_id, ticket_path)
                        release_ticket(ticket_path)
                        bot.send_message(
                            message.chat.id,
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å ticket –¥–ª—è user_id={user_id} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫. –ë–∏–ª–µ—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –ø—É–ª."
                        )
                    
            # –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –Ω–µ break, loop –ø–æ–π–¥–µ—Ç –¥–∞–ª—å—à–µ

        total_time = int(time.time() - start_time)
        pending_after = get_all_failed_deliveries()
        pending_count = len(pending_after)

        result_msg = (
            f"üì¶ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
            f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –ø–æ–ª—É—á–∞–ª–∏): {already_count}\n"
            f"üïì –í—Ä–µ–º—è: {total_time} —Å–µ–∫.\n"
            f"üì≠ –û–∂–∏–¥–∞—é—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {pending_count}"
        )
        bot.send_message(message.chat.id, result_msg)
        logger.info(result_msg)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å 3 –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –±—ç–∫–æ—Ñ—Ñ–æ–º
        if pending_count > 0:
            bot.send_message(message.chat.id, "‚ôªÔ∏è –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤...")
            retry_sent = retry_failed = 0
            start_time_retry = time.time()

            for user_id, ticket_path in get_all_failed_deliveries():
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ LOST –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if not os.path.isfile(ticket_path):
                    release_ticket(ticket_path)
                    mark_ticket_lost(ticket_path)
                    add_failed_delivery(user_id, ticket_path)
                    bot.send_message(message.chat.id,
                        f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ticket_path}. –ë–∏–ª–µ—Ç –ø–æ–º–µ—á–µ–Ω LOST –¥–ª—è user_id={user_id}."
                    )
                    logger.error(f"[AUTO-RETRY] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ticket_path} –¥–ª—è user_id={user_id}")
                    retry_failed += 1
                    continue

                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 3 —Ä–∞–∑
                max_retries = 3
                delay = 5
                sent = False
                for attempt in range(1, max_retries + 1):
                    try:
                        with open(ticket_path, 'rb') as pdf:
                            try_send_with_telegram_limit(bot.send_document, user_id, pdf)
                        assign_ticket(ticket_path, user_id)
                        remove_failed_delivery(user_id)
                        log_chat(user_id, "BOT", f"[DOCUMENT] {os.path.basename(ticket_path)}")
                        retry_sent += 1
                        logger.info(f"[AUTO-RETRY] –£—Å–ø–µ—à–Ω–æ –¥–ª—è user_id={user_id}, –ø–æ–ø—ã—Ç–∫–∞ {attempt}")
                        sent = True
                        break
                    except Exception as e:
                        err = str(e).lower()
                        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ ‚Äî —Å—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º LOST
                        
                        if any(k in err for k in ["403", "bot was blocked"]):
                            add_failed_delivery(user_id, ticket_path)
                            release_ticket(ticket_path)
                            bot.send_message(
                                message.chat.id,
                                f"‚ùå user_id={user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ë–∏–ª–µ—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –ø—É–ª."
                            )
                            logger.error(f"[AUTO-RETRY] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {user_id}: {e}")
                            retry_failed += 1
                            sent = True
                            break
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ 429 Retry-After
                        m = re.search(r"retry after (\d+)", err)
                        wait = (int(m.group(1)) + 1) if m else delay
                        if attempt < max_retries:
                            logger.warning(f"[AUTO-RETRY] –ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {user_id}: {e}. –ñ–¥—ë–º {wait}s.")
                            time.sleep(wait)
                            delay *= 2
                            continue
                        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
                        if not os.path.isfile(ticket_path):
                            release_ticket(ticket_path)
                            mark_ticket_lost(ticket_path)
                            add_failed_delivery(user_id, ticket_path)
                            bot.send_message(
                                message.chat.id,
                                f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ticket_path}. –ë–∏–ª–µ—Ç –ø–æ–º–µ—á–µ–Ω LOST."
                            )
                        else:
                            add_failed_delivery(user_id, ticket_path)
                            release_ticket(ticket_path)
                            bot.send_message(
                                message.chat.id,
                                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å ticket –¥–ª—è user_id={user_id}. –ë–∏–ª–µ—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –ø—É–ª."
                            )
                    
                        logger.error(f"[AUTO-RETRY] –ü–æ—Ç–µ—Ä—è–Ω –±–∏–ª–µ—Ç {ticket_path} –¥–ª—è {user_id}")
                        retry_failed += 1
                        # –∫–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ –ø–æ–ø—ã—Ç–æ–∫
                time.sleep(5)

            total_time_retry = int(time.time() - start_time_retry)
            pending_after_retry = get_all_failed_deliveries()
            bot.send_message(message.chat.id,
                f"‚ôªÔ∏è –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–î–æ–ø. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {retry_sent}\n"
                f"–û—à–∏–±–æ–∫: {retry_failed}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {len(pending_after_retry)}\n"
                f"–í—Ä–µ–º—è: {total_time_retry}s"
            )
            logger.info(
                "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ=%d, –æ—à–∏–±–æ–∫=%d, —Å–∫–∏–ø–Ω—É—Ç–æ=%d, –æ–±—â–µ–µ –≤—Ä–µ–º—è=%ds",
                sent_count, failed_count, already_count, int(time.time() - start_time)
            )

    @bot.message_handler(commands=['failed_report'])
    @admin_required(bot)
    @admin_error_catcher(bot)
    def handle_failed_report(message):
        failed = dict(get_all_failed_deliveries())  # {user_id: ticket_path}

        if not failed:
            bot.send_message(message.chat.id, "‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ—É–¥–∞—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π –±–∏–ª–µ—Ç–æ–≤.")
            return

        conn = sqlite3.connect("users.db")
        cur = conn.cursor()

        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            workbook = xlsxwriter.Workbook(tmp.name)
            worksheet = workbook.add_worksheet("Failed Deliveries")

            worksheet.write_row(0, 0, [
                "user_id", "username", "ticket_path", "original_name", "—Å—Ç–∞—Ç—É—Å", "–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
            ])

            for idx, (user_id, ticket_path) in enumerate(failed.items(), 1):
                cur.execute("SELECT username FROM users WHERE user_id=?", (user_id,))
                row = cur.fetchone()
                username = f"@{row[0]}" if row and row[0] else ""

                cur.execute("""
                    SELECT original_name, lost, archived_unused, assigned_to
                    FROM tickets
                    WHERE file_path=?
                """, (ticket_path,))
                row = cur.fetchone()

                if row:
                    original_name, lost, archived, assigned = row
                    if lost:
                        status = "–£—Ç—Ä–∞—á–µ–Ω–Ω—ã–π"
                    elif archived:
                        status = "–ê—Ä—Ö–∏–≤–Ω—ã–π"
                    elif assigned:
                        status = "–í—ã–¥–∞–Ω"
                    else:
                        status = "–ê–∫—Ç–∏–≤–Ω—ã–π"
                else:
                    original_name = "‚ùì –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    status = "‚ùå –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

                worksheet.write_row(idx, 0, [
                    user_id,
                    username,
                    ticket_path,
                    original_name,
                    status,
                    "–î–∞"  # —Ä–∞–∑ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å –≤ failed_deliveries ‚Äî –∑–Ω–∞—á–∏—Ç –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
                ])

            worksheet.set_column(0, 0, 14)
            worksheet.set_column(1, 1, 20)
            worksheet.set_column(2, 2, 60)
            worksheet.set_column(3, 3, 30)
            worksheet.set_column(4, 4, 20)
            worksheet.set_column(5, 5, 18)

            workbook.close()

            doc = open(tmp.name, "rb")
            bot.send_document(message.chat.id, doc, caption="üìÑ –û—Ç—á—ë—Ç –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∞—Ö –±–∏–ª–µ—Ç–æ–≤")
            doc.close()

        os.remove(tmp.name)        

    @bot.message_handler(commands=['chatlog'])
    @admin_required(bot)
    @admin_error_catcher(bot)
    def handle_chatlog(message):
        args = message.text.strip().split()
        if len(args) != 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /chatlog user_id –∏–ª–∏ /chatlog @username")
            return

        user_ref = args[1]
        user_id = resolve_user_id(user_ref)
        if not user_id:
            bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        log_path = os.path.join("logs", f"{user_id}.txt")
        if not os.path.isfile(log_path):
            bot.reply_to(message, "–î–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏.")
            return

        with open(log_path, "rb") as f:
            bot.send_document(message.chat.id, f, caption=f"üìÑ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å user_id {user_id}")