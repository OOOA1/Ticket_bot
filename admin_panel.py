import os
import time
from invite_admin import generate_invites, export_invites_xlsx
from database import get_wave_stats
from datetime import datetime
from telebot import types
from database import get_all_user_ids
from config import WAVE_FILE, DEFAULT_TICKET_FOLDER
#from database import sync_ticket_folder
from database import get_user_id_by_username, get_user_last_ticket_time, get_free_ticket, assign_ticket, insert_ticket, is_duplicate_hash, get_free_ticket_count
from zipfile import ZipFile
import tempfile
import logging
from database import create_new_wave
from uuid import uuid4
import hashlib
import shutil

ADMINS_FILE = "admins.txt"
FOUNDER_IDS = [781477708, 5477727657]
LOG_FILE = "bot_errors.log"
awaiting_invite_count = {}

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()  # —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ç–æ–∂–µ
    ]
)
logger = logging.getLogger("admin_panel")

def load_admins():
    if not os.path.exists(ADMINS_FILE):
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã —Ç—ã —Å–∞–º —Ç—É–¥–∞ –¥–æ–±–∞–≤–∏–ª id
        with open(ADMINS_FILE, "w") as f:
            pass
    with open(ADMINS_FILE, "r") as f:
        return [int(line.strip()) for line in f if line.strip().isdigit()]

def save_admins(admin_list):
    with open(ADMINS_FILE, "w") as f:
        for admin_id in admin_list:
            f.write(str(admin_id) + "\n")

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤–º–µ—Å—Ç–æ FSM)
upload_waiting = {}

def admin_error_catcher(bot):
    def decorator(func):
        def wrapper(message, *args, **kwargs):
            try:
                return func(message, *args, **kwargs)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ {func.__name__}: {e}", exc_info=True)
                try:
                    bot.reply_to(message, "‚ùóÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –û–Ω–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ª–æ–≥.")
                except Exception:
                    pass
        return wrapper
    return decorator

def register_admin_handlers(bot):

    @bot.message_handler(commands=['new_wave'])
    @admin_error_catcher(bot)
    def handle_new_wave(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—É—é –≤–æ–ª–Ω—É.")
            return
        if get_free_ticket_count() == 0:
            bot.send_message(message.chat.id, "üö´ –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –≤–æ–ª–Ω—É ‚Äî –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–∏–ª–µ—Ç—ã —á–µ—Ä–µ–∑ /upload_zip.")
            return

        now = create_new_wave(message.from_user.id)
        # === –¥–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞!
        with open(WAVE_FILE, "w") as f:
            f.write(now)
        bot.send_message(message.chat.id, f"–ù–æ–≤–∞—è –≤–æ–ª–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—Ä–µ–º—è: {now}")

    @bot.message_handler(commands=['delete_all'])
    @admin_error_catcher(bot)
    def delete_all_tickets(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            return
        count = 0
        for f in os.listdir(DEFAULT_TICKET_FOLDER):
            path = os.path.join(DEFAULT_TICKET_FOLDER, f)
            if os.path.isfile(path):
                os.remove(path)
                count += 1
        bot.send_message(message.chat.id, f"–£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {count}")
        #sync_ticket_folder(DEFAULT_TICKET_FOLDER)

    @bot.message_handler(commands=['list_tickets'])
    @admin_error_catcher(bot)
    def list_tickets(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            return

        files = os.listdir(DEFAULT_TICKET_FOLDER)
        if not files:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤.")
            return

        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π .txt —Ñ–∞–π–ª —Å –∏–º–µ–Ω–∞–º–∏
        with tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.txt', encoding='utf-8') as temp_file:
            file_list = "\n".join(files)
            temp_file.write(file_list)
            temp_file_path = temp_file.name

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
        with open(temp_file_path, 'rb') as doc:
            bot.send_document(message.chat.id, doc, caption="–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_file_path)

    @bot.message_handler(commands=['upload_zip'])
    @admin_error_catcher(bot)
    def start_upload(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            return
        upload_waiting[message.from_user.id] = True
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ ZIP-—Ñ–∞–π–ª —Å –±–∏–ª–µ—Ç–∞–º–∏.")

    @bot.message_handler(content_types=['document'])
    @admin_error_catcher(bot)
    def handle_document(message):
        ADMINS = load_admins()
        user_id = message.from_user.id
        if user_id in ADMINS and upload_waiting.get(user_id):
            doc = message.document
            if not doc.file_name.endswith('.zip'):
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ .zip –∞—Ä—Ö–∏–≤.")
                return
            try:
                file_info = bot.get_file(doc.file_id)
                downloaded = bot.download_file(file_info.file_path)
                zip_path = f"temp_upload_{user_id}.zip"
                with open(zip_path, 'wb') as f:
                    f.write(downloaded)
                report_path = process_zip(zip_path, uploaded_by=user_id, bot=bot)
                with open(report_path, 'rb') as rep:
                    bot.send_document(message.chat.id, rep, caption="üìÑ –û—Ç—á—ë—Ç –æ –∑–∞–≥—Ä—É–∑–∫–µ –±–∏–ª–µ—Ç–æ–≤")
                os.remove(report_path)
                os.remove(zip_path)
            except Exception as e:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∞.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}", exc_info=True)
            upload_waiting[user_id] = False


    @bot.message_handler(commands=['myid'])
    @admin_error_catcher(bot)
    def handle_myid(message):
        bot.reply_to(message, f"–í–∞—à user_id: {message.from_user.id}")

    @bot.message_handler(commands=['stats'])
    @admin_error_catcher(bot)
    def handle_stats(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ===
        import os
        if not os.path.exists(WAVE_FILE):
            bot.send_message(message.chat.id, "–í–æ–ª–Ω–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å.")
            return

        with open(WAVE_FILE, "r") as f:
            wave_start = datetime.fromisoformat(f.read().strip())

        users_with_ticket, free_tickets, all_users = get_wave_stats(wave_start)

        # –ü–æ–¥—Å—á—ë—Ç —á–∏—Å–ª–∞ –≤–æ–ª–Ω
        if os.path.exists("waves.txt"):
            with open("waves.txt", "r") as wf:
                total_waves = len([line for line in wf if line.strip()])
        else:
            total_waves = 1

        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–π –≤–æ–ª–Ω–µ:\n"
            f"‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∏–ª–µ—Ç–æ–º: {users_with_ticket}\n"
            f"‚Äî –°–≤–æ–±–æ–¥–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤: {free_tickets}\n"
            f"‚Äî –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_users}\n"
            f"‚Äî –í—Å–µ–≥–æ –≤–æ–ª–Ω –±—ã–ª–æ: {total_waves}"
        )
        bot.send_message(message.chat.id, text)
    
    @bot.message_handler(commands=['force_give'])
    @admin_error_catcher(bot)
    def handle_force_give(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç username
        args = message.text.strip().split()
        if len(args) < 2 or not args[1].startswith("@"):
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /force_give @username")
            return

        username = args[1][1:]  # —É–±–∏—Ä–∞–µ–º @

        user_id = get_user_id_by_username(username)
        if not user_id:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –æ–Ω —É–∂–µ –±–∏–ª–µ—Ç –≤ —Ç–µ–∫—É—â–µ–π –≤–æ–ª–Ω–µ
        with open(WAVE_FILE, "r") as f:
            wave_start = datetime.fromisoformat(f.read().strip())
        last_ticket_time = get_user_last_ticket_time(user_id)
        if last_ticket_time and last_ticket_time >= wave_start:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –ø–æ–ª—É—á–∏–ª –±–∏–ª–µ—Ç –≤ —ç—Ç–æ–π –≤–æ–ª–Ω–µ.")
            return

        ticket_path = get_free_ticket()
        if not ticket_path:
            bot.reply_to(message, "–ë–∏–ª–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
            return

        try:
            with open(ticket_path, 'rb') as pdf:
                bot.send_document(user_id, pdf)
            assign_ticket(ticket_path, user_id)
            bot.reply_to(message, f"–ë–∏–ª–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}!")
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏–ª–µ—Ç–∞: {e}")
    
    @bot.message_handler(commands=['add_admin'])
    @admin_error_catcher(bot)
    def handle_add_admin(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        args = message.text.strip().split()
        if len(args) < 2 or not args[1].startswith("@"):
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /add_admin @username")
            return

        username = args[1][1:]
        user_id = get_user_id_by_username(username)
        if not user_id:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        if user_id in ADMINS:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –∞–¥–º–∏–Ω.")
            return

        ADMINS.append(user_id)
        save_admins(ADMINS)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (id {user_id}) —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

    @bot.message_handler(commands=['remove_admin'])
    @admin_error_catcher(bot)
    def handle_remove_admin(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        args = message.text.strip().split()
        if len(args) < 2 or not args[1].startswith("@"):
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /remove_admin @username")
            return

        username = args[1][1:]
        user_id = get_user_id_by_username(username)
        if not user_id:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return

        if user_id not in ADMINS:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –±—ã–ª –∞–¥–º–∏–Ω–æ–º.")
            return
        
        if user_id in FOUNDER_IDS:
            bot.reply_to(message, "–≠—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, –æ–Ω –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å!")
            return

        if user_id == message.from_user.id:
            bot.reply_to(message, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è —á–µ—Ä–µ–∑ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return

        ADMINS.remove(user_id)
        save_admins(ADMINS)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (id {user_id}) –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω.")

    @bot.message_handler(
    func=lambda m: (m.text and m.text.startswith('/broadcast')) or (m.caption and m.caption.startswith('/broadcast')),
    content_types=['text', 'photo', 'animation', 'document', 'video']
    )
    @admin_error_catcher(bot)
    def handle_broadcast(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        user_ids = get_all_user_ids()
        success, fail = 0, 0
        failed_ids = []
        sent_ids = []

        # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–¥–ª—è caption/text)
        if message.content_type in ['photo', 'animation', 'document', 'video']:
            caption = (message.caption or '').replace('/broadcast', '', 1).strip()
        else:
            caption = message.text.replace('/broadcast', '', 1).strip()

        # –î–ª—è —Ñ–æ—Ç–æ
        if message.content_type == 'photo':
            media_id = message.photo[-1].file_id
            for user_id in user_ids:
                try:
                    bot.send_photo(user_id, media_id, caption=caption)
                    success += 1
                    sent_ids.append(user_id)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ send_photo –¥–ª—è {user_id}: {e}")
                    fail += 1
                    failed_ids.append(user_id)
                time.sleep(0.04)  # –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å

            bot.reply_to(message, f"üì∏ –§–æ—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {fail}")

        # –î–ª—è GIF/animation
        elif message.content_type == 'animation':
            media_id = message.animation.file_id
            for user_id in user_ids:
                try:
                    bot.send_animation(user_id, media_id, caption=caption)
                    success += 1
                    sent_ids.append(user_id)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ send_animation –¥–ª—è {user_id}: {e}")
                    fail += 1
                    failed_ids.append(user_id)
                time.sleep(0.04)
            bot.reply_to(message, f"üéû GIF-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {fail}")

        # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (pdf, png, jpg –∫–∞–∫ —Ñ–∞–π–ª –∏ —Ç.–¥.)
        elif message.content_type == 'document':
            media_id = message.document.file_id
            for user_id in user_ids:
                try:
                    bot.send_document(user_id, media_id, caption=caption)
                    success += 1
                    sent_ids.append(user_id)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ send_document –¥–ª—è {user_id}: {e}")
                    fail += 1
                    failed_ids.append(user_id)
                time.sleep(0.04)
            bot.reply_to(message, f"üìÑ –†–∞—Å—Å—ã–ª–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {fail}")

        # –î–ª—è –≤–∏–¥–µ–æ
        elif message.content_type == 'video':
            media_id = message.video.file_id
            for user_id in user_ids:
                try:
                    bot.send_video(user_id, media_id, caption=caption)
                    success += 1
                    sent_ids.append(user_id)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ send_video –¥–ª—è {user_id}: {e}")
                    fail += 1
                    failed_ids.append(user_id)
                time.sleep(0.04)
            bot.reply_to(message, f"üé¨ –í–∏–¥–µ–æ-—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {fail}")

        # –î–ª—è —Ç–µ–∫—Å—Ç–∞
        elif message.content_type == 'text':
            if not caption:
                bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫: /broadcast —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é.")
                return
            for user_id in user_ids:
                try:
                    bot.send_message(user_id, caption)
                    success += 1
                    sent_ids.append(user_id)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ send_message –¥–ª—è {user_id}: {e}")
                    fail += 1
                    failed_ids.append(user_id)
                time.sleep(0.04)
            bot.reply_to(message, f"üí¨ –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {fail}")

        # –î–ª—è –æ—Å–æ–±–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ ‚Äî –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ id –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"===[–†–ê–°–°–´–õ–ö–ê /broadcast]===")
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –∏–∑ {len(user_ids)}")
        print(f"–û—à–∏–±–∫–∏ –±—ã–ª–∏ –¥–ª—è id: {failed_ids}")
        print(f"–£—Å–ø–µ—à–Ω–æ: {sent_ids}")
        print("===")

    @bot.message_handler(commands=['help'])
    @admin_error_catcher(bot)
    def handle_help(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            bot.reply_to(message, "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        text = (
            "<b>üîë –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å (–∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å) –±–æ—Ç–∞\n"
            "/new_wave ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤–æ–ª–Ω—É\n"
            "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∏–ª–µ—Ç–∞–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "/force_give @username ‚Äî –≤—ã–¥–∞—Ç—å –±–∏–ª–µ—Ç –≤—Ä—É—á–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
            "/add_admin @username ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞\n"
            "/remove_admin @username ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
            "/list_tickets ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∏–ª–µ—Ç–æ–≤\n"
            "/delete_all ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –±–∏–ª–µ—Ç—ã –∏–∑ –ø–∞–ø–∫–∏\n"
            "/upload_zip ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å ZIP-–∞—Ä—Ö–∏–≤ —Å –±–∏–ª–µ—Ç–∞–º–∏\n"
            "/myid ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π user_id\n"
            "/broadcast —Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞ ‚Äî –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞\n"
            "/gen_invites ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å excel-—Ñ–∞–π–ª —Å –∏–Ω–≤–∞–π—Ç–∞–º–∏\n"
            "/help ‚Äî –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ –º–µ–Ω—é\n"
        )
        bot.send_message(message.chat.id, text, parse_mode="HTML")
    

    @bot.message_handler(commands=['gen_invites'])
    @admin_error_catcher(bot)
    def ask_invite_count(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            return
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –∏–Ω–≤–∞–π—Ç-–∫–æ–¥–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?")
        awaiting_invite_count[message.from_user.id] = True

    @bot.message_handler(func=lambda message: awaiting_invite_count.get(message.from_user.id))
    @admin_error_catcher(bot)
    def generate_and_send_invites(message):
        ADMINS = load_admins()
        if message.from_user.id not in ADMINS:
            return

        try:
            count = int(message.text)
            if not (1 <= count <= 5000):
                bot.send_message(message.chat.id, "–ú–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç 1 –¥–æ 5000 –∫–æ–¥–æ–≤ –∑–∞ —Ä–∞–∑.")
                return
        except Exception:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚Äî —Å–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å.")
            return

        awaiting_invite_count.pop(message.from_user.id, None)

        codes = generate_invites(count)
        temp_path = export_invites_xlsx(codes)

        with open(temp_path, "rb") as doc:
            bot.send_document(message.chat.id, doc, caption=f"–ì–æ—Ç–æ–≤–æ! {count} –∏–Ω–≤–∞–π—Ç–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
        os.remove(temp_path)
    

    def archive_old_tickets():
        pdf_files = [f for f in os.listdir(DEFAULT_TICKET_FOLDER) if f.lower().endswith('.pdf')]
        if not pdf_files:
            return None  # –ù–µ—á–µ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å

        now = datetime.now().strftime("%Y-%m-%d_%H-%M")
        temp_folder = os.path.join("archive", f"_temp_{now}")
        zip_path = os.path.join("archive", f"{now}.zip")

        os.makedirs(temp_folder, exist_ok=True)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º PDF-—Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        for file_name in pdf_files:
            src = os.path.join(DEFAULT_TICKET_FOLDER, file_name)
            dst = os.path.join(temp_folder, file_name)
            os.rename(src, dst)

        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤–æ .zip
        with ZipFile(zip_path, 'w') as zipf:
            for file_name in os.listdir(temp_folder):
                file_path = os.path.join(temp_folder, file_name)
                zipf.write(file_path, arcname=file_name)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        shutil.rmtree(temp_folder)

        return zip_path

    def process_zip(zip_path, uploaded_by, bot):
        archive_result = archive_old_tickets()
        if archive_result:
            bot.send_message(
                uploaded_by,
                f"üì¶ –°—Ç–∞—Ä—ã–µ –±–∏–ª–µ—Ç—ã –±—ã–ª–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤:\n<code>{archive_result}</code>",
                parse_mode="HTML"
            )
            logger.info(f"–ê—Ä—Ö–∏–≤ —Å—Ç–∞—Ä—ã—Ö –±–∏–ª–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω: {archive_result}")
        if archive_result:
            print(f"üéí –°–æ—Ö—Ä–∞–Ω—ë–Ω –∞—Ä—Ö–∏–≤ —Å—Ç–∞—Ä—ã—Ö –±–∏–ª–µ—Ç–æ–≤: {archive_result}")

        added, duplicates, not_pdf = [], [], []
        with ZipFile(zip_path, 'r') as zip_ref:
            for file_info in zip_ref.infolist():
                original_name = file_info.filename
                if not original_name.lower().endswith(".pdf"):
                    not_pdf.append(original_name)
                    continue
                content = zip_ref.read(file_info)
                file_hash = hashlib.sha256(content).hexdigest()
                if is_duplicate_hash(file_hash):
                    duplicates.append(original_name)
                    continue
                uuid_name = str(uuid4()) + ".pdf"
                full_path = os.path.join(DEFAULT_TICKET_FOLDER, uuid_name)
                with open(full_path, "wb") as f:
                    f.write(content)
                insert_ticket(full_path, file_hash, original_name, uploaded_by)
                added.append((original_name, uuid_name))

        report_lines = ["=== –û—Ç—á—ë—Ç –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –±–∏–ª–µ—Ç–æ–≤ ===", f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(added)}", f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}", f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ PDF: {len(not_pdf)}", ""]
        if added:
            report_lines.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã:")
            report_lines.extend([f"- {orig} ‚Üí {new}" for orig, new in added])
        if duplicates:
            report_lines.append("\n‚ôªÔ∏è –î—É–±–ª–∏–∫–∞—Ç—ã:")
            report_lines.extend([f"- {name}" for name in duplicates])
        if not_pdf:
            report_lines.append("\n‚ùå –ù–µ PDF:")
            report_lines.extend([f"- {name}" for name in not_pdf])

        report_text = "\n".join(report_lines)
        with tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.txt', encoding='utf-8') as temp_file:
            temp_file.write(report_text)
            return temp_file.name

    upload_waiting = {}
